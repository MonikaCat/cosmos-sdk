// Code generated by capnpc-go. DO NOT EDIT.

package simapp

import (
	types "github.com/cosmos/cosmos-sdk/x/gov/types"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Msg struct{ capnp.Struct }

// Msg_TypeID is the unique identifier for the type Msg.
const Msg_TypeID = 0xb0b6a2655379b1b6

func NewMsg(s *capnp.Segment) (Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Msg{st}, err
}

func NewRootMsg(s *capnp.Segment) (Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Msg{st}, err
}

func ReadRootMsg(msg *capnp.Message) (Msg, error) {
	root, err := msg.RootPtr()
	return Msg{root.Struct()}, err
}

func (s Msg) String() string {
	str, _ := text.Marshal(0xb0b6a2655379b1b6, s.Struct)
	return str
}

func (s Msg) Gov() (types.Msg, error) {
	p, err := s.Struct.Ptr(0)
	return types.Msg{Struct: p.Struct()}, err
}

func (s Msg) HasGov() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Msg) SetGov(v types.Msg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGov sets the gov field to a newly
// allocated types.Msg struct, preferring placement in s's segment.
func (s Msg) NewGov() (types.Msg, error) {
	ss, err := types.NewMsg(s.Struct.Segment())
	if err != nil {
		return types.Msg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Msg_List is a list of Msg.
type Msg_List struct{ capnp.List }

// NewMsg creates a new list of Msg.
func NewMsg_List(s *capnp.Segment, sz int32) (Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Msg_List{l}, err
}

func (s Msg_List) At(i int) Msg { return Msg{s.List.Struct(i)} }

func (s Msg_List) Set(i int, v Msg) error { return s.List.SetStruct(i, v.Struct) }

func (s Msg_List) String() string {
	str, _ := text.MarshalList(0xb0b6a2655379b1b6, s.List)
	return str
}

// Msg_Promise is a wrapper for a Msg promised by a client call.
type Msg_Promise struct{ *capnp.Pipeline }

func (p Msg_Promise) Struct() (Msg, error) {
	s, err := p.Pipeline.Struct()
	return Msg{s}, err
}

func (p Msg_Promise) Gov() types.Msg_Promise {
	return types.Msg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SimappProposal struct{ capnp.Struct }

// SimappProposal_TypeID is the unique identifier for the type SimappProposal.
const SimappProposal_TypeID = 0xf63bae7ad83827be

func NewSimappProposal(s *capnp.Segment) (SimappProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimappProposal{st}, err
}

func NewRootSimappProposal(s *capnp.Segment) (SimappProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimappProposal{st}, err
}

func ReadRootSimappProposal(msg *capnp.Message) (SimappProposal, error) {
	root, err := msg.RootPtr()
	return SimappProposal{root.Struct()}, err
}

func (s SimappProposal) String() string {
	str, _ := text.Marshal(0xf63bae7ad83827be, s.Struct)
	return str
}

func (s SimappProposal) TextProposal() (types.TextProposal, error) {
	p, err := s.Struct.Ptr(0)
	return types.TextProposal{Struct: p.Struct()}, err
}

func (s SimappProposal) HasTextProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SimappProposal) SetTextProposal(v types.TextProposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTextProposal sets the textProposal field to a newly
// allocated types.TextProposal struct, preferring placement in s's segment.
func (s SimappProposal) NewTextProposal() (types.TextProposal, error) {
	ss, err := types.NewTextProposal(s.Struct.Segment())
	if err != nil {
		return types.TextProposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SimappProposal_List is a list of SimappProposal.
type SimappProposal_List struct{ capnp.List }

// NewSimappProposal creates a new list of SimappProposal.
func NewSimappProposal_List(s *capnp.Segment, sz int32) (SimappProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SimappProposal_List{l}, err
}

func (s SimappProposal_List) At(i int) SimappProposal { return SimappProposal{s.List.Struct(i)} }

func (s SimappProposal_List) Set(i int, v SimappProposal) error { return s.List.SetStruct(i, v.Struct) }

func (s SimappProposal_List) String() string {
	str, _ := text.MarshalList(0xf63bae7ad83827be, s.List)
	return str
}

// SimappProposal_Promise is a wrapper for a SimappProposal promised by a client call.
type SimappProposal_Promise struct{ *capnp.Pipeline }

func (p SimappProposal_Promise) Struct() (SimappProposal, error) {
	s, err := p.Pipeline.Struct()
	return SimappProposal{s}, err
}

func (p SimappProposal_Promise) TextProposal() types.TextProposal_Promise {
	return types.TextProposal_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PubKey struct{ capnp.Struct }
type PubKey_Which uint16

const (
	PubKey_Which_secp256k1 PubKey_Which = 0
	PubKey_Which_ed25519   PubKey_Which = 1
)

func (w PubKey_Which) String() string {
	const s = "secp256k1ed25519"
	switch w {
	case PubKey_Which_secp256k1:
		return s[0:9]
	case PubKey_Which_ed25519:
		return s[9:16]

	}
	return "PubKey_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PubKey_TypeID is the unique identifier for the type PubKey.
const PubKey_TypeID = 0xdc2d85e9202b6785

func NewPubKey(s *capnp.Segment) (PubKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PubKey{st}, err
}

func NewRootPubKey(s *capnp.Segment) (PubKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PubKey{st}, err
}

func ReadRootPubKey(msg *capnp.Message) (PubKey, error) {
	root, err := msg.RootPtr()
	return PubKey{root.Struct()}, err
}

func (s PubKey) String() string {
	str, _ := text.Marshal(0xdc2d85e9202b6785, s.Struct)
	return str
}

func (s PubKey) Which() PubKey_Which {
	return PubKey_Which(s.Struct.Uint16(0))
}
func (s PubKey) Secp256k1() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != secp256k1")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PubKey) HasSecp256k1() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PubKey) SetSecp256k1(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(0, v)
}

func (s PubKey) Ed25519() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != ed25519")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PubKey) HasEd25519() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PubKey) SetEd25519(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(0, v)
}

// PubKey_List is a list of PubKey.
type PubKey_List struct{ capnp.List }

// NewPubKey creates a new list of PubKey.
func NewPubKey_List(s *capnp.Segment, sz int32) (PubKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PubKey_List{l}, err
}

func (s PubKey_List) At(i int) PubKey { return PubKey{s.List.Struct(i)} }

func (s PubKey_List) Set(i int, v PubKey) error { return s.List.SetStruct(i, v.Struct) }

func (s PubKey_List) String() string {
	str, _ := text.MarshalList(0xdc2d85e9202b6785, s.List)
	return str
}

// PubKey_Promise is a wrapper for a PubKey promised by a client call.
type PubKey_Promise struct{ *capnp.Pipeline }

func (p PubKey_Promise) Struct() (PubKey, error) {
	s, err := p.Pipeline.Struct()
	return PubKey{s}, err
}

const schema_a8444e9342b047f5 = "x\xdal\x91?\x8f\x12Q\x14\xc5\xefyo\x10\x0a&" +
	"\xccsL\xd4JC\xa3\xc4\x7f\x19t\x08`\x01\x12\x8c" +
	"\x85\xc1\xcc\x83\xded\x1c&D\x05ft@\xc5\xc6X" +
	"`gea/\x8d\x95\xc1\x86\xc2\x82\xc4N\x0b\x1b+" +
	"\x0b\xbf\xc0~\x80\xddr\xdf\xe6\x91ew\xb2\xd9\xea\xbd" +
	"{rr~\xf7\xe4Z\xef\x9b\xcc\xc9\x14@$\xf3\x99" +
	"3j\xf5}\xd6\x0b\xbf\xac\x96$l\xa8\xdd\x07\xcb\xd6" +
	"\xa7G\xed\xaf\x94A\x96H\x8c~\x88\xa9~_4\x08" +
	"j>\xb8vyg~\xe3?I\x1b)\xe7}d\x19" +
	"\x91\xf8\xf9W\xfc\xd1\xd6\xdf\xaf\x09j}\xa5\xfa\xef\xed" +
	"\xb7\xbb{\xa7d\xde.\xe1,\xec\x9a\xfe\xda.tn" +
	"\xf2t\xe4\xc7\xf1\xad\x00Q?\x0cn\x06~\xdc\x18\xc7" +
	"\xf5N2\xf0\x00ip\x83\xc8\x00\x910\x8bD2\xc7" +
	"!\xdb\x0c\xd9A\xf4\x0a\x96\x1a.:\x8f+\xc5\xeeg" +
	"\"jB\xe0\x924\x18\xd2\xa2\xc0yi\x00\x80\xc7\x01" +
	"\xebx)\x02\xac\x14\x97m\xb9\xe3\xb8\xeeM\x9f<\x0c" +
	"1\xd3\xe8\x1c7\xf2Jm\xd8\xa5.\x91\xbc\xca!\xef" +
	"0\x98\xd8W\xe7\xa0U\xa7E$\xafs\xc8*\x83J" +
	"\xc2 .\xbb\x95\xe7\x04\x07&1\x98\x84wa\xbf\xec" +
	"\xbaNm;\x1f\x01y\x0a\xd8\xdbh\xde\xcb(\x8e\x12" +
	"\x1f\xc3\x13\x9d\x9f\xe9\x1bq\xc8\x0b\x0cj\x12\xbe\x99h" +
	"\x1f\x15\xa2\xc4\x1f\xc2R\x17\xfd\x8f\xf7\xd6\xbf\x16\x1f\x0e" +
	"\xfb\x1c\x04\x00\x00\xff\xff\xc3\xa0x\xe3"

func init() {
	schemas.Register(schema_a8444e9342b047f5,
		0xb0b6a2655379b1b6,
		0xdc2d85e9202b6785,
		0xf63bae7ad83827be)
}
