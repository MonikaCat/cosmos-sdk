// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simapp/codec.proto

package simapp

import (
	bytes "bytes"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/gov/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	// Types that are valid to be assigned to Sum:
	//	*Msg_GovSubmitProposal
	//	*Msg_GovDeposit
	//	*Msg_GovVote
	Sum isMsg_Sum `protobuf_oneof:"sum"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Sum interface {
	isMsg_Sum()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Msg_GovSubmitProposal struct {
	GovSubmitProposal *MsgGovSubmitProposal `protobuf:"bytes,1,opt,name=gov_submit_proposal,json=govSubmitProposal,proto3,oneof" json:"gov_submit_proposal,omitempty"`
}
type Msg_GovDeposit struct {
	GovDeposit *types.MsgDeposit `protobuf:"bytes,2,opt,name=gov_deposit,json=govDeposit,proto3,oneof" json:"gov_deposit,omitempty"`
}
type Msg_GovVote struct {
	GovVote *types.MsgVote `protobuf:"bytes,3,opt,name=gov_vote,json=govVote,proto3,oneof" json:"gov_vote,omitempty"`
}

func (*Msg_GovSubmitProposal) isMsg_Sum() {}
func (*Msg_GovDeposit) isMsg_Sum()        {}
func (*Msg_GovVote) isMsg_Sum()           {}

func (m *Msg) GetSum() isMsg_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Msg) GetGovSubmitProposal() *MsgGovSubmitProposal {
	if x, ok := m.GetSum().(*Msg_GovSubmitProposal); ok {
		return x.GovSubmitProposal
	}
	return nil
}

func (m *Msg) GetGovDeposit() *types.MsgDeposit {
	if x, ok := m.GetSum().(*Msg_GovDeposit); ok {
		return x.GovDeposit
	}
	return nil
}

func (m *Msg) GetGovVote() *types.MsgVote {
	if x, ok := m.GetSum().(*Msg_GovVote); ok {
		return x.GovVote
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Msg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Msg_GovSubmitProposal)(nil),
		(*Msg_GovDeposit)(nil),
		(*Msg_GovVote)(nil),
	}
}

type MsgGovSubmitProposal struct {
	*types.MsgSubmitProposalBase `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:"base,omitempty"`
	// Types that are valid to be assigned to Proposal:
	//	*MsgGovSubmitProposal_TextProposal
	//	*MsgGovSubmitProposal_SomeOtherProposal
	Proposal isMsgGovSubmitProposal_Proposal `protobuf_oneof:"proposal"`
}

func (m *MsgGovSubmitProposal) Reset()      { *m = MsgGovSubmitProposal{} }
func (*MsgGovSubmitProposal) ProtoMessage() {}
func (*MsgGovSubmitProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{1}
}
func (m *MsgGovSubmitProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovSubmitProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovSubmitProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovSubmitProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovSubmitProposal.Merge(m, src)
}
func (m *MsgGovSubmitProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovSubmitProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovSubmitProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovSubmitProposal proto.InternalMessageInfo

type isMsgGovSubmitProposal_Proposal interface {
	isMsgGovSubmitProposal_Proposal()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgGovSubmitProposal_TextProposal struct {
	TextProposal *types.TextProposal `protobuf:"bytes,2,opt,name=text_proposal,json=textProposal,proto3,oneof" json:"text_proposal,omitempty"`
}
type MsgGovSubmitProposal_SomeOtherProposal struct {
	SomeOtherProposal *SomeOtherProposal `protobuf:"bytes,3,opt,name=some_other_proposal,json=someOtherProposal,proto3,oneof" json:"some_other_proposal,omitempty"`
}

func (*MsgGovSubmitProposal_TextProposal) isMsgGovSubmitProposal_Proposal()      {}
func (*MsgGovSubmitProposal_SomeOtherProposal) isMsgGovSubmitProposal_Proposal() {}

func (m *MsgGovSubmitProposal) GetProposal() isMsgGovSubmitProposal_Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *MsgGovSubmitProposal) GetTextProposal() *types.TextProposal {
	if x, ok := m.GetProposal().(*MsgGovSubmitProposal_TextProposal); ok {
		return x.TextProposal
	}
	return nil
}

func (m *MsgGovSubmitProposal) GetSomeOtherProposal() *SomeOtherProposal {
	if x, ok := m.GetProposal().(*MsgGovSubmitProposal_SomeOtherProposal); ok {
		return x.SomeOtherProposal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgGovSubmitProposal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgGovSubmitProposal_TextProposal)(nil),
		(*MsgGovSubmitProposal_SomeOtherProposal)(nil),
	}
}

type SomeOtherProposal struct {
	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SomethingElse string `protobuf:"bytes,3,opt,name=something_else,json=somethingElse,proto3" json:"something_else,omitempty"`
}

func (m *SomeOtherProposal) Reset()      { *m = SomeOtherProposal{} }
func (*SomeOtherProposal) ProtoMessage() {}
func (*SomeOtherProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{2}
}
func (m *SomeOtherProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SomeOtherProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SomeOtherProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SomeOtherProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeOtherProposal.Merge(m, src)
}
func (m *SomeOtherProposal) XXX_Size() int {
	return m.Size()
}
func (m *SomeOtherProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeOtherProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SomeOtherProposal proto.InternalMessageInfo

func (m *SomeOtherProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SomeOtherProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SomeOtherProposal) GetSomethingElse() string {
	if m != nil {
		return m.SomethingElse
	}
	return ""
}

type Tx struct {
	Msg        []*Msg       `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty"`
	Fee        *Fee         `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Signatures []*Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Memo       string       `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *Tx) Reset()      { *m = Tx{} }
func (*Tx) ProtoMessage() {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{3}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetMsg() []*Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Tx) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *Tx) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Tx) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type Fee struct {
	IntialDeposit []types1.Coin `protobuf:"bytes,1,rep,name=intial_deposit,json=intialDeposit,proto3" json:"intial_deposit"`
	Gas           uint64        `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`
}

func (m *Fee) Reset()      { *m = Fee{} }
func (*Fee) ProtoMessage() {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{4}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetIntialDeposit() []types1.Coin {
	if m != nil {
		return m.IntialDeposit
	}
	return nil
}

func (m *Fee) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

type Signature struct {
	Pubkey    *PubKey `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature []byte  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()      { *m = Signature{} }
func (*Signature) ProtoMessage() {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{5}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPubkey() *PubKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PubKey struct {
	// Types that are valid to be assigned to Sum:
	//	*PubKey_Secp256K1
	//	*PubKey_Ed25519
	//	*PubKey_Multisig
	Sum isPubKey_Sum `protobuf_oneof:"sum"`
}

func (m *PubKey) Reset()      { *m = PubKey{} }
func (*PubKey) ProtoMessage() {}
func (*PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72d24c3c2e20ba, []int{6}
}
func (m *PubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKey.Merge(m, src)
}
func (m *PubKey) XXX_Size() int {
	return m.Size()
}
func (m *PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_PubKey proto.InternalMessageInfo

type isPubKey_Sum interface {
	isPubKey_Sum()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PubKey_Secp256K1 struct {
	Secp256K1 []byte `protobuf:"bytes,1,opt,name=secp256k1,proto3,oneof" json:"secp256k1,omitempty"`
}
type PubKey_Ed25519 struct {
	Ed25519 []byte `protobuf:"bytes,2,opt,name=ed25519,proto3,oneof" json:"ed25519,omitempty"`
}
type PubKey_Multisig struct {
	Multisig []byte `protobuf:"bytes,3,opt,name=multisig,proto3,oneof" json:"multisig,omitempty"`
}

func (*PubKey_Secp256K1) isPubKey_Sum() {}
func (*PubKey_Ed25519) isPubKey_Sum()   {}
func (*PubKey_Multisig) isPubKey_Sum()  {}

func (m *PubKey) GetSum() isPubKey_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PubKey) GetSecp256K1() []byte {
	if x, ok := m.GetSum().(*PubKey_Secp256K1); ok {
		return x.Secp256K1
	}
	return nil
}

func (m *PubKey) GetEd25519() []byte {
	if x, ok := m.GetSum().(*PubKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (m *PubKey) GetMultisig() []byte {
	if x, ok := m.GetSum().(*PubKey_Multisig); ok {
		return x.Multisig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PubKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PubKey_Secp256K1)(nil),
		(*PubKey_Ed25519)(nil),
		(*PubKey_Multisig)(nil),
	}
}

func init() {
	proto.RegisterType((*Msg)(nil), "cosmos_sdk.simapp.Msg")
	proto.RegisterType((*MsgGovSubmitProposal)(nil), "cosmos_sdk.simapp.MsgGovSubmitProposal")
	proto.RegisterType((*SomeOtherProposal)(nil), "cosmos_sdk.simapp.SomeOtherProposal")
	proto.RegisterType((*Tx)(nil), "cosmos_sdk.simapp.Tx")
	proto.RegisterType((*Fee)(nil), "cosmos_sdk.simapp.Fee")
	proto.RegisterType((*Signature)(nil), "cosmos_sdk.simapp.Signature")
	proto.RegisterType((*PubKey)(nil), "cosmos_sdk.simapp.PubKey")
}

func init() { proto.RegisterFile("simapp/codec.proto", fileDescriptor_7a72d24c3c2e20ba) }

var fileDescriptor_7a72d24c3c2e20ba = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xb6, 0xb1, 0x09, 0x64, 0x02, 0x88, 0x2c, 0xe8, 0xbd, 0x10, 0x45, 0x0b, 0xb2, 0xde, 0x53,
	0x39, 0x25, 0x22, 0x15, 0x48, 0xad, 0xa8, 0xaa, 0xa6, 0x85, 0x46, 0xaa, 0x50, 0xd1, 0x82, 0x90,
	0x5a, 0x55, 0x8a, 0x9c, 0x64, 0xbb, 0xac, 0x88, 0xb3, 0x56, 0x76, 0x63, 0x85, 0x5b, 0x8f, 0x55,
	0x4f, 0xfd, 0x09, 0x3d, 0x56, 0xfd, 0x25, 0x1c, 0x73, 0xe4, 0x84, 0xc0, 0x5c, 0x7a, 0xe4, 0x27,
	0x54, 0x5e, 0x9b, 0xe0, 0x12, 0xdf, 0x66, 0xbf, 0xf9, 0xe6, 0xf3, 0xcc, 0xb7, 0xb3, 0x06, 0x24,
	0xb9, 0xe7, 0xfa, 0x7e, 0xad, 0x23, 0xba, 0xb4, 0x53, 0xf5, 0x07, 0x42, 0x09, 0x54, 0xec, 0x08,
	0xe9, 0x09, 0xd9, 0x92, 0xdd, 0xb3, 0x6a, 0x9c, 0x2e, 0xaf, 0x32, 0xc1, 0x84, 0xce, 0xd6, 0xa2,
	0x28, 0x26, 0x96, 0x8b, 0xea, 0xdc, 0xa7, 0x32, 0x5d, 0x5b, 0xfe, 0x77, 0x54, 0x63, 0x22, 0xa8,
	0x4d, 0x25, 0x9c, 0x6b, 0x13, 0xac, 0x03, 0xc9, 0xd0, 0x07, 0x58, 0x61, 0x22, 0x68, 0xc9, 0x61,
	0xdb, 0xe3, 0xaa, 0xe5, 0x0f, 0x84, 0x2f, 0xa4, 0xdb, 0x2b, 0x99, 0x1b, 0xe6, 0x66, 0xa1, 0xfe,
	0xa4, 0x3a, 0xf5, 0xe9, 0xea, 0x81, 0x64, 0x6f, 0x45, 0x70, 0xa4, 0xf9, 0x87, 0x09, 0xbd, 0x69,
	0x90, 0x22, 0x7b, 0x0c, 0xa2, 0x97, 0x50, 0x88, 0xa4, 0xbb, 0xd4, 0x17, 0x92, 0xab, 0xd2, 0x8c,
	0x96, 0xac, 0xa4, 0x25, 0x47, 0x55, 0x26, 0x82, 0x48, 0xf1, 0x4d, 0xcc, 0x69, 0x1a, 0x04, 0x98,
	0x08, 0x92, 0x13, 0xda, 0x81, 0xf9, 0x48, 0x20, 0x10, 0x8a, 0x96, 0x2c, 0x5d, 0xbd, 0x96, 0x59,
	0x7d, 0x22, 0x14, 0x6d, 0x1a, 0x64, 0x8e, 0x89, 0x20, 0x0a, 0x1b, 0xb3, 0x60, 0xc9, 0xa1, 0xe7,
	0x7c, 0x9b, 0x81, 0xd5, 0xac, 0x6e, 0xd1, 0x2b, 0xb0, 0xdb, 0xae, 0xa4, 0x59, 0x43, 0x4e, 0x34,
	0xff, 0x2e, 0x69, 0xb8, 0x92, 0x36, 0xec, 0xf1, 0xd5, 0xba, 0x49, 0x74, 0x29, 0xda, 0x83, 0x45,
	0x45, 0x47, 0x29, 0xc3, 0xe2, 0xe9, 0xf0, 0xb4, 0xd6, 0x31, 0x1d, 0xa5, 0x7d, 0x5a, 0x50, 0xa9,
	0x33, 0x3a, 0x81, 0x15, 0x29, 0x3c, 0xda, 0x12, 0xea, 0x94, 0x0e, 0x1e, 0xc4, 0xe2, 0x61, 0xff,
	0xcb, 0x70, 0xff, 0x48, 0x78, 0xf4, 0x7d, 0x44, 0x4e, 0x5b, 0x2f, 0x1f, 0x83, 0xcf, 0xed, 0xaf,
	0x3f, 0xd6, 0x8d, 0x06, 0xc0, 0xfc, 0xbd, 0xa4, 0x33, 0x80, 0xe2, 0x54, 0x2d, 0x5a, 0x85, 0x59,
	0xc5, 0x55, 0x2f, 0x76, 0x22, 0x4f, 0xe2, 0x03, 0xda, 0x80, 0x42, 0x97, 0xca, 0xce, 0x80, 0xfb,
	0x8a, 0x8b, 0xbe, 0x9e, 0x2c, 0x4f, 0xd2, 0x10, 0xfa, 0x1f, 0x96, 0xa2, 0x6f, 0xaa, 0x53, 0xde,
	0x67, 0x2d, 0xda, 0x93, 0xf1, 0xf5, 0xe4, 0xc9, 0xe2, 0x04, 0xdd, 0xeb, 0x49, 0xea, 0xfc, 0x32,
	0x61, 0xe6, 0x78, 0x84, 0x36, 0xc1, 0xf2, 0x24, 0x2b, 0x99, 0x1b, 0xd6, 0x66, 0xa1, 0xfe, 0x4f,
	0xf6, 0x4a, 0x91, 0x88, 0x12, 0x31, 0x3f, 0x53, 0x9a, 0x78, 0x99, 0xc5, 0xdc, 0xa7, 0x94, 0x44,
	0x14, 0xb4, 0x0b, 0x20, 0x39, 0xeb, 0xbb, 0x6a, 0x38, 0xa0, 0xb2, 0x64, 0x69, 0xe9, 0x4a, 0x96,
	0x5f, 0xf7, 0x24, 0x92, 0xe2, 0x23, 0x04, 0xb6, 0x47, 0x3d, 0x51, 0xb2, 0x75, 0xd7, 0x3a, 0x76,
	0x4e, 0xc0, 0xda, 0xa7, 0x14, 0xbd, 0x80, 0x25, 0xde, 0x57, 0xdc, 0xed, 0x4d, 0xf6, 0x36, 0xee,
	0x7b, 0x39, 0x2d, 0xfe, 0x5a, 0xf0, 0x7e, 0xc3, 0xbe, 0xb8, 0x5a, 0x37, 0xc8, 0x62, 0xcc, 0xbe,
	0x5f, 0xd9, 0x65, 0xb0, 0x98, 0x2b, 0xf5, 0x04, 0x36, 0x89, 0x42, 0xe7, 0x13, 0xe4, 0x27, 0x4d,
	0xa0, 0x2d, 0xc8, 0xf9, 0xc3, 0xf6, 0x19, 0x3d, 0x4f, 0x76, 0x6f, 0x2d, 0xa3, 0xe5, 0xc3, 0x61,
	0xfb, 0x1d, 0x3d, 0x27, 0x09, 0x11, 0x55, 0x20, 0x3f, 0xe9, 0x5c, 0xeb, 0x2e, 0x90, 0x07, 0xc0,
	0xe1, 0x90, 0x8b, 0xf9, 0x08, 0x43, 0x5e, 0xd2, 0x8e, 0x5f, 0xdf, 0xde, 0x39, 0xdb, 0xd2, 0xea,
	0x0b, 0x4d, 0x83, 0x3c, 0x40, 0xa8, 0x0c, 0x73, 0xb4, 0x5b, 0xdf, 0xde, 0xde, 0x7a, 0x16, 0xab,
	0x44, 0x0f, 0x26, 0x01, 0x50, 0x05, 0xe6, 0xbd, 0x61, 0x4f, 0x71, 0xc9, 0x99, 0xbe, 0xc9, 0x28,
	0x39, 0x41, 0x92, 0xe7, 0xd4, 0xd8, 0x1d, 0xdf, 0x60, 0xe3, 0xf2, 0x06, 0x1b, 0x77, 0x37, 0xd8,
	0xfc, 0x12, 0x62, 0xf3, 0x67, 0x88, 0xcd, 0x8b, 0x10, 0x9b, 0xe3, 0x10, 0x9b, 0xd7, 0x21, 0x36,
	0x7f, 0x87, 0xd8, 0xb8, 0x0b, 0xb1, 0xf9, 0xfd, 0x16, 0x1b, 0xe3, 0x5b, 0x6c, 0x5c, 0xde, 0x62,
	0xe3, 0x63, 0x2e, 0x9e, 0xaa, 0x9d, 0xd3, 0xbf, 0x9d, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x67, 0xa1, 0xb4, 0x3b, 0xe1, 0x04, 0x00, 0x00,
}

func (this *Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg)
	if !ok {
		that2, ok := that.(Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Sum == nil {
		if this.Sum != nil {
			return false
		}
	} else if this.Sum == nil {
		return false
	} else if !this.Sum.Equal(that1.Sum) {
		return false
	}
	return true
}
func (this *Msg_GovSubmitProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_GovSubmitProposal)
	if !ok {
		that2, ok := that.(Msg_GovSubmitProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GovSubmitProposal.Equal(that1.GovSubmitProposal) {
		return false
	}
	return true
}
func (this *Msg_GovDeposit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_GovDeposit)
	if !ok {
		that2, ok := that.(Msg_GovDeposit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GovDeposit.Equal(that1.GovDeposit) {
		return false
	}
	return true
}
func (this *Msg_GovVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_GovVote)
	if !ok {
		that2, ok := that.(Msg_GovVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GovVote.Equal(that1.GovVote) {
		return false
	}
	return true
}
func (this *MsgGovSubmitProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGovSubmitProposal)
	if !ok {
		that2, ok := that.(MsgGovSubmitProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MsgSubmitProposalBase.Equal(that1.MsgSubmitProposalBase) {
		return false
	}
	if that1.Proposal == nil {
		if this.Proposal != nil {
			return false
		}
	} else if this.Proposal == nil {
		return false
	} else if !this.Proposal.Equal(that1.Proposal) {
		return false
	}
	return true
}
func (this *MsgGovSubmitProposal_TextProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGovSubmitProposal_TextProposal)
	if !ok {
		that2, ok := that.(MsgGovSubmitProposal_TextProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TextProposal.Equal(that1.TextProposal) {
		return false
	}
	return true
}
func (this *MsgGovSubmitProposal_SomeOtherProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGovSubmitProposal_SomeOtherProposal)
	if !ok {
		that2, ok := that.(MsgGovSubmitProposal_SomeOtherProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SomeOtherProposal.Equal(that1.SomeOtherProposal) {
		return false
	}
	return true
}
func (this *SomeOtherProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SomeOtherProposal)
	if !ok {
		that2, ok := that.(SomeOtherProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.SomethingElse != that1.SomethingElse {
		return false
	}
	return true
}
func (this *Tx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tx)
	if !ok {
		that2, ok := that.(Tx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Msg) != len(that1.Msg) {
		return false
	}
	for i := range this.Msg {
		if !this.Msg[i].Equal(that1.Msg[i]) {
			return false
		}
	}
	if !this.Fee.Equal(that1.Fee) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	if this.Memo != that1.Memo {
		return false
	}
	return true
}
func (this *Fee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fee)
	if !ok {
		that2, ok := that.(Fee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IntialDeposit) != len(that1.IntialDeposit) {
		return false
	}
	for i := range this.IntialDeposit {
		if !this.IntialDeposit[i].Equal(&that1.IntialDeposit[i]) {
			return false
		}
	}
	if this.Gas != that1.Gas {
		return false
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *PubKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKey)
	if !ok {
		that2, ok := that.(PubKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Sum == nil {
		if this.Sum != nil {
			return false
		}
	} else if this.Sum == nil {
		return false
	} else if !this.Sum.Equal(that1.Sum) {
		return false
	}
	return true
}
func (this *PubKey_Secp256K1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKey_Secp256K1)
	if !ok {
		that2, ok := that.(PubKey_Secp256K1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Secp256K1, that1.Secp256K1) {
		return false
	}
	return true
}
func (this *PubKey_Ed25519) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKey_Ed25519)
	if !ok {
		that2, ok := that.(PubKey_Ed25519)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Ed25519, that1.Ed25519) {
		return false
	}
	return true
}
func (this *PubKey_Multisig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKey_Multisig)
	if !ok {
		that2, ok := that.(PubKey_Multisig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Multisig, that1.Multisig) {
		return false
	}
	return true
}
func (this *Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&simapp.Msg{")
	if this.Sum != nil {
		s = append(s, "Sum: "+fmt.Sprintf("%#v", this.Sum)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Msg_GovSubmitProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.Msg_GovSubmitProposal{` +
		`GovSubmitProposal:` + fmt.Sprintf("%#v", this.GovSubmitProposal) + `}`}, ", ")
	return s
}
func (this *Msg_GovDeposit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.Msg_GovDeposit{` +
		`GovDeposit:` + fmt.Sprintf("%#v", this.GovDeposit) + `}`}, ", ")
	return s
}
func (this *Msg_GovVote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.Msg_GovVote{` +
		`GovVote:` + fmt.Sprintf("%#v", this.GovVote) + `}`}, ", ")
	return s
}
func (this *MsgGovSubmitProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&simapp.MsgGovSubmitProposal{")
	if this.MsgSubmitProposalBase != nil {
		s = append(s, "MsgSubmitProposalBase: "+fmt.Sprintf("%#v", this.MsgSubmitProposalBase)+",\n")
	}
	if this.Proposal != nil {
		s = append(s, "Proposal: "+fmt.Sprintf("%#v", this.Proposal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgGovSubmitProposal_TextProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.MsgGovSubmitProposal_TextProposal{` +
		`TextProposal:` + fmt.Sprintf("%#v", this.TextProposal) + `}`}, ", ")
	return s
}
func (this *MsgGovSubmitProposal_SomeOtherProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.MsgGovSubmitProposal_SomeOtherProposal{` +
		`SomeOtherProposal:` + fmt.Sprintf("%#v", this.SomeOtherProposal) + `}`}, ", ")
	return s
}
func (this *SomeOtherProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&simapp.SomeOtherProposal{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "SomethingElse: "+fmt.Sprintf("%#v", this.SomethingElse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&simapp.Tx{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.Fee != nil {
		s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	}
	if this.Signatures != nil {
		s = append(s, "Signatures: "+fmt.Sprintf("%#v", this.Signatures)+",\n")
	}
	s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&simapp.Fee{")
	if this.IntialDeposit != nil {
		vs := make([]types1.Coin, len(this.IntialDeposit))
		for i := range vs {
			vs[i] = this.IntialDeposit[i]
		}
		s = append(s, "IntialDeposit: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Gas: "+fmt.Sprintf("%#v", this.Gas)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&simapp.Signature{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&simapp.PubKey{")
	if this.Sum != nil {
		s = append(s, "Sum: "+fmt.Sprintf("%#v", this.Sum)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubKey_Secp256K1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.PubKey_Secp256K1{` +
		`Secp256K1:` + fmt.Sprintf("%#v", this.Secp256K1) + `}`}, ", ")
	return s
}
func (this *PubKey_Ed25519) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.PubKey_Ed25519{` +
		`Ed25519:` + fmt.Sprintf("%#v", this.Ed25519) + `}`}, ", ")
	return s
}
func (this *PubKey_Multisig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&simapp.PubKey_Multisig{` +
		`Multisig:` + fmt.Sprintf("%#v", this.Multisig) + `}`}, ", ")
	return s
}
func valueToGoStringCodec(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Msg_GovSubmitProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_GovSubmitProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GovSubmitProposal != nil {
		{
			size, err := m.GovSubmitProposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Msg_GovDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_GovDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GovDeposit != nil {
		{
			size, err := m.GovDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Msg_GovVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_GovVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GovVote != nil {
		{
			size, err := m.GovVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgGovSubmitProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovSubmitProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSubmitProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size := m.Proposal.Size()
			i -= size
			if _, err := m.Proposal.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MsgSubmitProposalBase != nil {
		{
			size, err := m.MsgSubmitProposalBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovSubmitProposal_TextProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSubmitProposal_TextProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextProposal != nil {
		{
			size, err := m.TextProposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgGovSubmitProposal_SomeOtherProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovSubmitProposal_SomeOtherProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SomeOtherProposal != nil {
		{
			size, err := m.SomeOtherProposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SomeOtherProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SomeOtherProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SomeOtherProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SomethingElse) > 0 {
		i -= len(m.SomethingElse)
		copy(dAtA[i:], m.SomethingElse)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.SomethingElse)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msg) > 0 {
		for iNdEx := len(m.Msg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gas != 0 {
		i = encodeVarintCodec(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IntialDeposit) > 0 {
		for iNdEx := len(m.IntialDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IntialDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubKey_Secp256K1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Secp256K1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secp256K1 != nil {
		i -= len(m.Secp256K1)
		copy(dAtA[i:], m.Secp256K1)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Secp256K1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PubKey_Ed25519) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Ed25519) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ed25519 != nil {
		i -= len(m.Ed25519)
		copy(dAtA[i:], m.Ed25519)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Ed25519)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PubKey_Multisig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey_Multisig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Multisig != nil {
		i -= len(m.Multisig)
		copy(dAtA[i:], m.Multisig)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Multisig)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	offset -= sovCodec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Msg_GovSubmitProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovSubmitProposal != nil {
		l = m.GovSubmitProposal.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Msg_GovDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovDeposit != nil {
		l = m.GovDeposit.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Msg_GovVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovVote != nil {
		l = m.GovVote.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *MsgGovSubmitProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgSubmitProposalBase != nil {
		l = m.MsgSubmitProposalBase.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Proposal != nil {
		n += m.Proposal.Size()
	}
	return n
}

func (m *MsgGovSubmitProposal_TextProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextProposal != nil {
		l = m.TextProposal.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *MsgGovSubmitProposal_SomeOtherProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SomeOtherProposal != nil {
		l = m.SomeOtherProposal.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *SomeOtherProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.SomethingElse)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, e := range m.Msg {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IntialDeposit) > 0 {
		for _, e := range m.IntialDeposit {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Gas != 0 {
		n += 1 + sovCodec(uint64(m.Gas))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *PubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *PubKey_Secp256K1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secp256K1 != nil {
		l = len(m.Secp256K1)
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *PubKey_Ed25519) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ed25519 != nil {
		l = len(m.Ed25519)
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *PubKey_Multisig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Multisig != nil {
		l = len(m.Multisig)
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`Sum:` + fmt.Sprintf("%v", this.Sum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_GovSubmitProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_GovSubmitProposal{`,
		`GovSubmitProposal:` + strings.Replace(fmt.Sprintf("%v", this.GovSubmitProposal), "MsgGovSubmitProposal", "MsgGovSubmitProposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_GovDeposit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_GovDeposit{`,
		`GovDeposit:` + strings.Replace(fmt.Sprintf("%v", this.GovDeposit), "MsgDeposit", "types.MsgDeposit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_GovVote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_GovVote{`,
		`GovVote:` + strings.Replace(fmt.Sprintf("%v", this.GovVote), "MsgVote", "types.MsgVote", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgGovSubmitProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgGovSubmitProposal{`,
		`MsgSubmitProposalBase:` + strings.Replace(fmt.Sprintf("%v", this.MsgSubmitProposalBase), "MsgSubmitProposalBase", "types.MsgSubmitProposalBase", 1) + `,`,
		`Proposal:` + fmt.Sprintf("%v", this.Proposal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgGovSubmitProposal_TextProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgGovSubmitProposal_TextProposal{`,
		`TextProposal:` + strings.Replace(fmt.Sprintf("%v", this.TextProposal), "TextProposal", "types.TextProposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgGovSubmitProposal_SomeOtherProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgGovSubmitProposal_SomeOtherProposal{`,
		`SomeOtherProposal:` + strings.Replace(fmt.Sprintf("%v", this.SomeOtherProposal), "SomeOtherProposal", "SomeOtherProposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SomeOtherProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SomeOtherProposal{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`SomethingElse:` + fmt.Sprintf("%v", this.SomethingElse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tx) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMsg := "[]*Msg{"
	for _, f := range this.Msg {
		repeatedStringForMsg += strings.Replace(f.String(), "Msg", "Msg", 1) + ","
	}
	repeatedStringForMsg += "}"
	repeatedStringForSignatures := "[]*Signature{"
	for _, f := range this.Signatures {
		repeatedStringForSignatures += strings.Replace(f.String(), "Signature", "Signature", 1) + ","
	}
	repeatedStringForSignatures += "}"
	s := strings.Join([]string{`&Tx{`,
		`Msg:` + repeatedStringForMsg + `,`,
		`Fee:` + strings.Replace(this.Fee.String(), "Fee", "Fee", 1) + `,`,
		`Signatures:` + repeatedStringForSignatures + `,`,
		`Memo:` + fmt.Sprintf("%v", this.Memo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fee) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIntialDeposit := "[]Coin{"
	for _, f := range this.IntialDeposit {
		repeatedStringForIntialDeposit += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForIntialDeposit += "}"
	s := strings.Join([]string{`&Fee{`,
		`IntialDeposit:` + repeatedStringForIntialDeposit + `,`,
		`Gas:` + fmt.Sprintf("%v", this.Gas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature{`,
		`Pubkey:` + strings.Replace(this.Pubkey.String(), "PubKey", "PubKey", 1) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubKey{`,
		`Sum:` + fmt.Sprintf("%v", this.Sum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubKey_Secp256K1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubKey_Secp256K1{`,
		`Secp256K1:` + fmt.Sprintf("%v", this.Secp256K1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubKey_Ed25519) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubKey_Ed25519{`,
		`Ed25519:` + fmt.Sprintf("%v", this.Ed25519) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubKey_Multisig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubKey_Multisig{`,
		`Multisig:` + fmt.Sprintf("%v", this.Multisig) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCodec(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovSubmitProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgGovSubmitProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_GovSubmitProposal{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgDeposit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_GovDeposit{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Msg_GovVote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovSubmitProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovSubmitProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovSubmitProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSubmitProposalBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgSubmitProposalBase == nil {
				m.MsgSubmitProposalBase = &types.MsgSubmitProposalBase{}
			}
			if err := m.MsgSubmitProposalBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.TextProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Proposal = &MsgGovSubmitProposal_TextProposal{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomeOtherProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SomeOtherProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Proposal = &MsgGovSubmitProposal_SomeOtherProposal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SomeOtherProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SomeOtherProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SomeOtherProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomethingElse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SomethingElse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, &Msg{})
			if err := m.Msg[len(m.Msg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntialDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntialDeposit = append(m.IntialDeposit, types1.Coin{})
			if err := m.IntialDeposit[len(m.IntialDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &PubKey{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256K1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &PubKey_Secp256K1{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ed25519", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &PubKey_Ed25519{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Sum = &PubKey_Multisig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCodec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCodec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCodec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCodec = fmt.Errorf("proto: unexpected end of group")
)
