// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	types "github.com/cosmos/cosmos-sdk/types"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Msg struct{ capnp.Struct }

// Msg_TypeID is the unique identifier for the type Msg.
const Msg_TypeID = 0x975222365e4da36c

func NewMsg(s *capnp.Segment) (Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Msg{st}, err
}

func NewRootMsg(s *capnp.Segment) (Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Msg{st}, err
}

func ReadRootMsg(msg *capnp.Message) (Msg, error) {
	root, err := msg.RootPtr()
	return Msg{root.Struct()}, err
}

func (s Msg) String() string {
	str, _ := text.Marshal(0x975222365e4da36c, s.Struct)
	return str
}

func (s Msg) MsgDeposit() (MsgDeposit, error) {
	p, err := s.Struct.Ptr(0)
	return MsgDeposit{Struct: p.Struct()}, err
}

func (s Msg) HasMsgDeposit() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Msg) SetMsgDeposit(v MsgDeposit) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsgDeposit sets the msgDeposit field to a newly
// allocated MsgDeposit struct, preferring placement in s's segment.
func (s Msg) NewMsgDeposit() (MsgDeposit, error) {
	ss, err := NewMsgDeposit(s.Struct.Segment())
	if err != nil {
		return MsgDeposit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Msg) MsgSubmitProposal() (MsgSubmitProposal, error) {
	p, err := s.Struct.Ptr(1)
	return MsgSubmitProposal{Struct: p.Struct()}, err
}

func (s Msg) HasMsgSubmitProposal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Msg) SetMsgSubmitProposal(v MsgSubmitProposal) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMsgSubmitProposal sets the msgSubmitProposal field to a newly
// allocated MsgSubmitProposal struct, preferring placement in s's segment.
func (s Msg) NewMsgSubmitProposal() (MsgSubmitProposal, error) {
	ss, err := NewMsgSubmitProposal(s.Struct.Segment())
	if err != nil {
		return MsgSubmitProposal{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Msg) MsgVote() (MsgVote, error) {
	p, err := s.Struct.Ptr(2)
	return MsgVote{Struct: p.Struct()}, err
}

func (s Msg) HasMsgVote() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Msg) SetMsgVote(v MsgVote) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMsgVote sets the msgVote field to a newly
// allocated MsgVote struct, preferring placement in s's segment.
func (s Msg) NewMsgVote() (MsgVote, error) {
	ss, err := NewMsgVote(s.Struct.Segment())
	if err != nil {
		return MsgVote{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Msg_List is a list of Msg.
type Msg_List struct{ capnp.List }

// NewMsg creates a new list of Msg.
func NewMsg_List(s *capnp.Segment, sz int32) (Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Msg_List{l}, err
}

func (s Msg_List) At(i int) Msg { return Msg{s.List.Struct(i)} }

func (s Msg_List) Set(i int, v Msg) error { return s.List.SetStruct(i, v.Struct) }

func (s Msg_List) String() string {
	str, _ := text.MarshalList(0x975222365e4da36c, s.List)
	return str
}

// Msg_Promise is a wrapper for a Msg promised by a client call.
type Msg_Promise struct{ *capnp.Pipeline }

func (p Msg_Promise) Struct() (Msg, error) {
	s, err := p.Pipeline.Struct()
	return Msg{s}, err
}

func (p Msg_Promise) MsgDeposit() MsgDeposit_Promise {
	return MsgDeposit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Msg_Promise) MsgSubmitProposal() MsgSubmitProposal_Promise {
	return MsgSubmitProposal_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Msg_Promise) MsgVote() MsgVote_Promise {
	return MsgVote_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type MsgSubmitProposal struct{ capnp.Struct }

// MsgSubmitProposal_TypeID is the unique identifier for the type MsgSubmitProposal.
const MsgSubmitProposal_TypeID = 0xd05208b80f978197

func NewMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func NewRootMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func ReadRootMsgSubmitProposal(msg *capnp.Message) (MsgSubmitProposal, error) {
	root, err := msg.RootPtr()
	return MsgSubmitProposal{root.Struct()}, err
}

func (s MsgSubmitProposal) String() string {
	str, _ := text.Marshal(0xd05208b80f978197, s.Struct)
	return str
}

func (s MsgSubmitProposal) Content() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s MsgSubmitProposal) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) ContentPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s MsgSubmitProposal) SetContent(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s MsgSubmitProposal) SetContentPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s MsgSubmitProposal) InitialDeposit() (types.CoinE_List, error) {
	p, err := s.Struct.Ptr(1)
	return types.CoinE_List{List: p.List()}, err
}

func (s MsgSubmitProposal) HasInitialDeposit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetInitialDeposit(v types.CoinE_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInitialDeposit sets the initialDeposit field to a newly
// allocated types.CoinE_List, preferring placement in s's segment.
func (s MsgSubmitProposal) NewInitialDeposit(n int32) (types.CoinE_List, error) {
	l, err := types.NewCoinE_List(s.Struct.Segment(), n)
	if err != nil {
		return types.CoinE_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s MsgSubmitProposal) Proposer() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s MsgSubmitProposal) HasProposer() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetProposer(v []byte) error {
	return s.Struct.SetData(2, v)
}

// MsgSubmitProposal_List is a list of MsgSubmitProposal.
type MsgSubmitProposal_List struct{ capnp.List }

// NewMsgSubmitProposal creates a new list of MsgSubmitProposal.
func NewMsgSubmitProposal_List(s *capnp.Segment, sz int32) (MsgSubmitProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return MsgSubmitProposal_List{l}, err
}

func (s MsgSubmitProposal_List) At(i int) MsgSubmitProposal {
	return MsgSubmitProposal{s.List.Struct(i)}
}

func (s MsgSubmitProposal_List) Set(i int, v MsgSubmitProposal) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MsgSubmitProposal_List) String() string {
	str, _ := text.MarshalList(0xd05208b80f978197, s.List)
	return str
}

// MsgSubmitProposal_Promise is a wrapper for a MsgSubmitProposal promised by a client call.
type MsgSubmitProposal_Promise struct{ *capnp.Pipeline }

func (p MsgSubmitProposal_Promise) Struct() (MsgSubmitProposal, error) {
	s, err := p.Pipeline.Struct()
	return MsgSubmitProposal{s}, err
}

func (p MsgSubmitProposal_Promise) Content() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type MsgDeposit struct{ capnp.Struct }

// MsgDeposit_TypeID is the unique identifier for the type MsgDeposit.
const MsgDeposit_TypeID = 0x88b8e1f2f884af9a

func NewMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func NewRootMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func ReadRootMsgDeposit(msg *capnp.Message) (MsgDeposit, error) {
	root, err := msg.RootPtr()
	return MsgDeposit{root.Struct()}, err
}

func (s MsgDeposit) String() string {
	str, _ := text.Marshal(0x88b8e1f2f884af9a, s.Struct)
	return str
}

func (s MsgDeposit) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgDeposit) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgDeposit) Depositor() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgDeposit) HasDepositor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetDepositor(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgDeposit) Amount() (types.CoinE_List, error) {
	p, err := s.Struct.Ptr(1)
	return types.CoinE_List{List: p.List()}, err
}

func (s MsgDeposit) HasAmount() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetAmount(v types.CoinE_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAmount sets the amount field to a newly
// allocated types.CoinE_List, preferring placement in s's segment.
func (s MsgDeposit) NewAmount(n int32) (types.CoinE_List, error) {
	l, err := types.NewCoinE_List(s.Struct.Segment(), n)
	if err != nil {
		return types.CoinE_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// MsgDeposit_List is a list of MsgDeposit.
type MsgDeposit_List struct{ capnp.List }

// NewMsgDeposit creates a new list of MsgDeposit.
func NewMsgDeposit_List(s *capnp.Segment, sz int32) (MsgDeposit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MsgDeposit_List{l}, err
}

func (s MsgDeposit_List) At(i int) MsgDeposit { return MsgDeposit{s.List.Struct(i)} }

func (s MsgDeposit_List) Set(i int, v MsgDeposit) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgDeposit_List) String() string {
	str, _ := text.MarshalList(0x88b8e1f2f884af9a, s.List)
	return str
}

// MsgDeposit_Promise is a wrapper for a MsgDeposit promised by a client call.
type MsgDeposit_Promise struct{ *capnp.Pipeline }

func (p MsgDeposit_Promise) Struct() (MsgDeposit, error) {
	s, err := p.Pipeline.Struct()
	return MsgDeposit{s}, err
}

type VoteOption uint16

// VoteOption_TypeID is the unique identifier for the type VoteOption.
const VoteOption_TypeID = 0xf2d035d43cbad2c9

// Values of VoteOption.
const (
	VoteOption_empty      VoteOption = 0
	VoteOption_yes        VoteOption = 1
	VoteOption_abstain    VoteOption = 2
	VoteOption_no         VoteOption = 3
	VoteOption_noWithVeto VoteOption = 4
)

// String returns the enum's constant name.
func (c VoteOption) String() string {
	switch c {
	case VoteOption_empty:
		return "empty"
	case VoteOption_yes:
		return "yes"
	case VoteOption_abstain:
		return "abstain"
	case VoteOption_no:
		return "no"
	case VoteOption_noWithVeto:
		return "noWithVeto"

	default:
		return ""
	}
}

// VoteOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func VoteOptionFromString(c string) VoteOption {
	switch c {
	case "empty":
		return VoteOption_empty
	case "yes":
		return VoteOption_yes
	case "abstain":
		return VoteOption_abstain
	case "no":
		return VoteOption_no
	case "noWithVeto":
		return VoteOption_noWithVeto

	default:
		return 0
	}
}

type VoteOption_List struct{ capnp.List }

func NewVoteOption_List(s *capnp.Segment, sz int32) (VoteOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return VoteOption_List{l.List}, err
}

func (l VoteOption_List) At(i int) VoteOption {
	ul := capnp.UInt16List{List: l.List}
	return VoteOption(ul.At(i))
}

func (l VoteOption_List) Set(i int, v VoteOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type MsgVote struct{ capnp.Struct }

// MsgVote_TypeID is the unique identifier for the type MsgVote.
const MsgVote_TypeID = 0xff7e7e2b9ac69b7a

func NewMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func NewRootMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func ReadRootMsgVote(msg *capnp.Message) (MsgVote, error) {
	root, err := msg.RootPtr()
	return MsgVote{root.Struct()}, err
}

func (s MsgVote) String() string {
	str, _ := text.Marshal(0xff7e7e2b9ac69b7a, s.Struct)
	return str
}

func (s MsgVote) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgVote) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgVote) Voter() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgVote) HasVoter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgVote) SetVoter(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgVote) Option() VoteOption {
	return VoteOption(s.Struct.Uint16(8))
}

func (s MsgVote) SetOption(v VoteOption) {
	s.Struct.SetUint16(8, uint16(v))
}

// MsgVote_List is a list of MsgVote.
type MsgVote_List struct{ capnp.List }

// NewMsgVote creates a new list of MsgVote.
func NewMsgVote_List(s *capnp.Segment, sz int32) (MsgVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return MsgVote_List{l}, err
}

func (s MsgVote_List) At(i int) MsgVote { return MsgVote{s.List.Struct(i)} }

func (s MsgVote_List) Set(i int, v MsgVote) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgVote_List) String() string {
	str, _ := text.MarshalList(0xff7e7e2b9ac69b7a, s.List)
	return str
}

// MsgVote_Promise is a wrapper for a MsgVote promised by a client call.
type MsgVote_Promise struct{ *capnp.Pipeline }

func (p MsgVote_Promise) Struct() (MsgVote, error) {
	s, err := p.Pipeline.Struct()
	return MsgVote{s}, err
}

type TextProposal struct{ capnp.Struct }

// TextProposal_TypeID is the unique identifier for the type TextProposal.
const TextProposal_TypeID = 0x86a3c8be418d6119

func NewTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func NewRootTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func ReadRootTextProposal(msg *capnp.Message) (TextProposal, error) {
	root, err := msg.RootPtr()
	return TextProposal{root.Struct()}, err
}

func (s TextProposal) String() string {
	str, _ := text.Marshal(0x86a3c8be418d6119, s.Struct)
	return str
}

func (s TextProposal) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TextProposal) HasTitle() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TextProposal) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TextProposal) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TextProposal) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TextProposal) HasDescription() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TextProposal) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TextProposal) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// TextProposal_List is a list of TextProposal.
type TextProposal_List struct{ capnp.List }

// NewTextProposal creates a new list of TextProposal.
func NewTextProposal_List(s *capnp.Segment, sz int32) (TextProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TextProposal_List{l}, err
}

func (s TextProposal_List) At(i int) TextProposal { return TextProposal{s.List.Struct(i)} }

func (s TextProposal_List) Set(i int, v TextProposal) error { return s.List.SetStruct(i, v.Struct) }

func (s TextProposal_List) String() string {
	str, _ := text.MarshalList(0x86a3c8be418d6119, s.List)
	return str
}

// TextProposal_Promise is a wrapper for a TextProposal promised by a client call.
type TextProposal_Promise struct{ *capnp.Pipeline }

func (p TextProposal_Promise) Struct() (TextProposal, error) {
	s, err := p.Pipeline.Struct()
	return TextProposal{s}, err
}

const schema_f6e87acf2c3fc2e7 = "x\xda\x8c\x94A\x88\x1bU\x1c\xc6\xbf\xef\xbd\xc4\xb4\xb2" +
	"5\x99N\xc54 \x8b\xc5\x1e\xd4\xd6m7Vd\x11" +
	"\xb6]W\xb0\xd2`^\\\xab\x16\x95\xce&C\x1cH" +
	"\xe6\x0d\x99\xd7\xda\xddC\x83 \x8b\x17/^\x16V<" +
	"\xedE\x0f\xb2\xe0i\xf5\xe0\xc1\x83\xe8\xc9U\xbczX" +
	"A\xd4\xc3\x1e\xdc\x83x\x91\x917\x13\x93\x107\xe2\xf5" +
	"\xbd\xff\xff}\xbf\xef\xff\xfff.tyY\\\xcc?" +
	" \x00U\xce\xdf\x93\x9c\xf6\xde\xbb\xf2\xc5\xd7\xdb\x1bp" +
	"\xcaL~\xf9r\xf1\xdc\xb7\xeb\xbf\xfe\x81\xbc(\x00\x17" +
	"\x7f\x7f\x94.Y\x00\x9c\xbf\xde\x02\x93\xad\x9dw\xfe<" +
	"\xdc\xdf}\x17\xaa\xcc\xc9\xda\xea\xeb\xac\xd0\xed\xdab7" +
	"\xe0\x0e\x98t\xb6ko<y\xa6\xb19\xf1\xb0,\x94" +
	"\xe8\x9e\x16?\xb9gm\x9b\xfb\x90\xd8\x01\xdc\x1fE1" +
	"\xd9|{\xb3\xb8{\xac\xb1wD}\xf5;\xd1\xa0\xfb" +
	"s\xda\xb0\x9f6|,\x8b\xc97\xdf\x7f\xfe\xf4\x0f\x97" +
	"\xf6\x0e\xe1\x94\xc5\xa8\x01\xac~(+t?\x91\x85\xb4" +
	"\xae\x0f&\xeb\x1f|\xb5\xf5\xd8\xdd\xbb\x89\x05\x1f+\xcd" +
	"[\xda\xea\xbe\x14t\x0f\xd2\xea\xdf\xa4\x05\xbf3\xd7\xd6" +
	"\xb7\xe7\xcc\x9a\x8c\xfcx\xae\xa9[~\xf3\xf1\xa6\x17\x85" +
	"\xd1\xc2\x8a\x7f\xc7\xd4{:*\xea\xd8\xeb\xd4IuL" +
	"\xe6\x80\x1c\x01\xe7\x91y@=,\xa9.\x08:\xe4)" +
	"\xda\xc3\xf3\xab\x80:'\xa9\x9e\x12\x9c5\x81\xe9\xf8\x9c" +
	"\x81\xe0\x0c\x98\xb4\xfc\xb8\xd9\x0b\"\x83B\xa0\xc3\xe1\xe9" +
	"T\xe5Z\xdc^\xf6#\x1d\xcb\xc0X\xdd\x99\xa1\xee\xb3" +
	"7\x00\xb5,\xa9\xea\x82\xff\xc8\xd6\x1a\x80\xba&\xa9^" +
	"\x11t\x04OQ\x00\xceK\x0b\x80\xaaK\xaa\x8e`\x12" +
	"\xf5td=@^m\xf18\x04\x8f\xa7H\x91\x8e\x03" +
	"\xa3\xc1\x1eO@\xf0\x04\xb8\xe8u\xf5\xad\xd0\xf0>\xb0" +
	".\xc9RrP\xd9x\xe2\xa3\xcf\xee\xfd\x14\xa0=\x1c" +
	"\x02\x8bI\xe0B-nO'\x1dN\xa8\xf6\xfe\x80\xea" +
	"5\x8b*2\xd4W\x97\x00\xb5\"\xa9n\x0a&\xdd\x81" +
	"s\xc8\xc0\xb04\x8a \xc8\x12\xd2\xeb\x17o\xadv\x03" +
	"\xa6\x8b\xd1\xb1\xc7\x0eK\xa3(eU\xfdn\xdc\xbe\xae" +
	"\x8d\xcf\xd2(\x09\xd9\xcd\x95\x1c\x1d.\xf5\x9f\xd1\xa1\xf1" +
	"C3\xb4\x93;b\xfe\xa9\xccHe\xc2\x9cE\xbe," +
	"\xa9\xae\x8d\x99\xbb\xba\x0e\xa8\xe7$Uk\xcc\x9c\xf7<" +
	"\xa0nf{\xe873]\x9e$\xc7\x98\xc1\x93`\x12" +
	"\x84\x81\x09\xbc\xce2\x16\xb3\xbdL_B\xb6M\xbfg" +
	";\x07\x8b\x9b\xe2\xeb_\xb9\xb2Sy!2\x81\xd4\xa1" +
	"5\x94!^\x9a\xb7/;\xe7\xcf\x00\x14\xce\xd9%\x80" +
	"\xd2y\xb0\x020\xe7\xdc\x7f\x03\x98\xf5\xbb\x91Y+\xac" +
	"\xf9q\xdf[\x8d\x8d\x17\x842\xd4I\xa8_\x0e\xcc\x9b" +
	"\xd7}H\xa3\xff3\xc8V\x13\xff#\xc5\xf3\x83\xe9\xad" +
	"\xd8\xe9\xe524\xb50\x8a\xf6\x91)\x9e\xbd\xad\x8d?" +
	"\xca\xaf\x8e\x8c\xfd\xbe\xc6\xfe\x15 \x8b\xe0\xdf\x01\x00\x00" +
	"\xff\xff\xb7,P\x16"

func init() {
	schemas.Register(schema_f6e87acf2c3fc2e7,
		0x86a3c8be418d6119,
		0x88b8e1f2f884af9a,
		0x975222365e4da36c,
		0xd05208b80f978197,
		0xf2d035d43cbad2c9,
		0xff7e7e2b9ac69b7a)
}
