// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	types "github.com/cosmos/cosmos-sdk/types"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type MsgSubmitProposal struct{ capnp.Struct }

// MsgSubmitProposal_TypeID is the unique identifier for the type MsgSubmitProposal.
const MsgSubmitProposal_TypeID = 0xd05208b80f978197

func NewMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func NewRootMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func ReadRootMsgSubmitProposal(msg *capnp.Message) (MsgSubmitProposal, error) {
	root, err := msg.RootPtr()
	return MsgSubmitProposal{root.Struct()}, err
}

func (s MsgSubmitProposal) String() string {
	str, _ := text.Marshal(0xd05208b80f978197, s.Struct)
	return str
}

func (s MsgSubmitProposal) Content() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s MsgSubmitProposal) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) ContentPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s MsgSubmitProposal) SetContent(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s MsgSubmitProposal) SetContentPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s MsgSubmitProposal) InitialDeposit() (types.CoinE_List, error) {
	p, err := s.Struct.Ptr(1)
	return types.CoinE_List{List: p.List()}, err
}

func (s MsgSubmitProposal) HasInitialDeposit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetInitialDeposit(v types.CoinE_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInitialDeposit sets the initialDeposit field to a newly
// allocated types.CoinE_List, preferring placement in s's segment.
func (s MsgSubmitProposal) NewInitialDeposit(n int32) (types.CoinE_List, error) {
	l, err := types.NewCoinE_List(s.Struct.Segment(), n)
	if err != nil {
		return types.CoinE_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s MsgSubmitProposal) Proposer() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s MsgSubmitProposal) HasProposer() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetProposer(v []byte) error {
	return s.Struct.SetData(2, v)
}

// MsgSubmitProposal_List is a list of MsgSubmitProposal.
type MsgSubmitProposal_List struct{ capnp.List }

// NewMsgSubmitProposal creates a new list of MsgSubmitProposal.
func NewMsgSubmitProposal_List(s *capnp.Segment, sz int32) (MsgSubmitProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return MsgSubmitProposal_List{l}, err
}

func (s MsgSubmitProposal_List) At(i int) MsgSubmitProposal {
	return MsgSubmitProposal{s.List.Struct(i)}
}

func (s MsgSubmitProposal_List) Set(i int, v MsgSubmitProposal) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MsgSubmitProposal_List) String() string {
	str, _ := text.MarshalList(0xd05208b80f978197, s.List)
	return str
}

// MsgSubmitProposal_Promise is a wrapper for a MsgSubmitProposal promised by a client call.
type MsgSubmitProposal_Promise struct{ *capnp.Pipeline }

func (p MsgSubmitProposal_Promise) Struct() (MsgSubmitProposal, error) {
	s, err := p.Pipeline.Struct()
	return MsgSubmitProposal{s}, err
}

func (p MsgSubmitProposal_Promise) Content() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type MsgDeposit struct{ capnp.Struct }

// MsgDeposit_TypeID is the unique identifier for the type MsgDeposit.
const MsgDeposit_TypeID = 0x88b8e1f2f884af9a

func NewMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func NewRootMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func ReadRootMsgDeposit(msg *capnp.Message) (MsgDeposit, error) {
	root, err := msg.RootPtr()
	return MsgDeposit{root.Struct()}, err
}

func (s MsgDeposit) String() string {
	str, _ := text.Marshal(0x88b8e1f2f884af9a, s.Struct)
	return str
}

func (s MsgDeposit) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgDeposit) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgDeposit) Depositor() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgDeposit) HasDepositor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetDepositor(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgDeposit) Amount() (types.CoinE_List, error) {
	p, err := s.Struct.Ptr(1)
	return types.CoinE_List{List: p.List()}, err
}

func (s MsgDeposit) HasAmount() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetAmount(v types.CoinE_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAmount sets the amount field to a newly
// allocated types.CoinE_List, preferring placement in s's segment.
func (s MsgDeposit) NewAmount(n int32) (types.CoinE_List, error) {
	l, err := types.NewCoinE_List(s.Struct.Segment(), n)
	if err != nil {
		return types.CoinE_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// MsgDeposit_List is a list of MsgDeposit.
type MsgDeposit_List struct{ capnp.List }

// NewMsgDeposit creates a new list of MsgDeposit.
func NewMsgDeposit_List(s *capnp.Segment, sz int32) (MsgDeposit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MsgDeposit_List{l}, err
}

func (s MsgDeposit_List) At(i int) MsgDeposit { return MsgDeposit{s.List.Struct(i)} }

func (s MsgDeposit_List) Set(i int, v MsgDeposit) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgDeposit_List) String() string {
	str, _ := text.MarshalList(0x88b8e1f2f884af9a, s.List)
	return str
}

// MsgDeposit_Promise is a wrapper for a MsgDeposit promised by a client call.
type MsgDeposit_Promise struct{ *capnp.Pipeline }

func (p MsgDeposit_Promise) Struct() (MsgDeposit, error) {
	s, err := p.Pipeline.Struct()
	return MsgDeposit{s}, err
}

type VoteOption uint16

// VoteOption_TypeID is the unique identifier for the type VoteOption.
const VoteOption_TypeID = 0xf2d035d43cbad2c9

// Values of VoteOption.
const (
	VoteOption_empty      VoteOption = 0
	VoteOption_yes        VoteOption = 1
	VoteOption_abstain    VoteOption = 2
	VoteOption_no         VoteOption = 3
	VoteOption_noWithVeto VoteOption = 4
)

// String returns the enum's constant name.
func (c VoteOption) String() string {
	switch c {
	case VoteOption_empty:
		return "empty"
	case VoteOption_yes:
		return "yes"
	case VoteOption_abstain:
		return "abstain"
	case VoteOption_no:
		return "no"
	case VoteOption_noWithVeto:
		return "noWithVeto"

	default:
		return ""
	}
}

// VoteOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func VoteOptionFromString(c string) VoteOption {
	switch c {
	case "empty":
		return VoteOption_empty
	case "yes":
		return VoteOption_yes
	case "abstain":
		return VoteOption_abstain
	case "no":
		return VoteOption_no
	case "noWithVeto":
		return VoteOption_noWithVeto

	default:
		return 0
	}
}

type VoteOption_List struct{ capnp.List }

func NewVoteOption_List(s *capnp.Segment, sz int32) (VoteOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return VoteOption_List{l.List}, err
}

func (l VoteOption_List) At(i int) VoteOption {
	ul := capnp.UInt16List{List: l.List}
	return VoteOption(ul.At(i))
}

func (l VoteOption_List) Set(i int, v VoteOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type MsgVote struct{ capnp.Struct }

// MsgVote_TypeID is the unique identifier for the type MsgVote.
const MsgVote_TypeID = 0xff7e7e2b9ac69b7a

func NewMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func NewRootMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func ReadRootMsgVote(msg *capnp.Message) (MsgVote, error) {
	root, err := msg.RootPtr()
	return MsgVote{root.Struct()}, err
}

func (s MsgVote) String() string {
	str, _ := text.Marshal(0xff7e7e2b9ac69b7a, s.Struct)
	return str
}

func (s MsgVote) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgVote) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgVote) Voter() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgVote) HasVoter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgVote) SetVoter(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgVote) Option() VoteOption {
	return VoteOption(s.Struct.Uint16(8))
}

func (s MsgVote) SetOption(v VoteOption) {
	s.Struct.SetUint16(8, uint16(v))
}

// MsgVote_List is a list of MsgVote.
type MsgVote_List struct{ capnp.List }

// NewMsgVote creates a new list of MsgVote.
func NewMsgVote_List(s *capnp.Segment, sz int32) (MsgVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return MsgVote_List{l}, err
}

func (s MsgVote_List) At(i int) MsgVote { return MsgVote{s.List.Struct(i)} }

func (s MsgVote_List) Set(i int, v MsgVote) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgVote_List) String() string {
	str, _ := text.MarshalList(0xff7e7e2b9ac69b7a, s.List)
	return str
}

// MsgVote_Promise is a wrapper for a MsgVote promised by a client call.
type MsgVote_Promise struct{ *capnp.Pipeline }

func (p MsgVote_Promise) Struct() (MsgVote, error) {
	s, err := p.Pipeline.Struct()
	return MsgVote{s}, err
}

type TextProposal struct{ capnp.Struct }

// TextProposal_TypeID is the unique identifier for the type TextProposal.
const TextProposal_TypeID = 0x86a3c8be418d6119

func NewTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func NewRootTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func ReadRootTextProposal(msg *capnp.Message) (TextProposal, error) {
	root, err := msg.RootPtr()
	return TextProposal{root.Struct()}, err
}

func (s TextProposal) String() string {
	str, _ := text.Marshal(0x86a3c8be418d6119, s.Struct)
	return str
}

func (s TextProposal) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TextProposal) HasTitle() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TextProposal) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TextProposal) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TextProposal) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TextProposal) HasDescription() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TextProposal) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TextProposal) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// TextProposal_List is a list of TextProposal.
type TextProposal_List struct{ capnp.List }

// NewTextProposal creates a new list of TextProposal.
func NewTextProposal_List(s *capnp.Segment, sz int32) (TextProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TextProposal_List{l}, err
}

func (s TextProposal_List) At(i int) TextProposal { return TextProposal{s.List.Struct(i)} }

func (s TextProposal_List) Set(i int, v TextProposal) error { return s.List.SetStruct(i, v.Struct) }

func (s TextProposal_List) String() string {
	str, _ := text.MarshalList(0x86a3c8be418d6119, s.List)
	return str
}

// TextProposal_Promise is a wrapper for a TextProposal promised by a client call.
type TextProposal_Promise struct{ *capnp.Pipeline }

func (p TextProposal_Promise) Struct() (TextProposal, error) {
	s, err := p.Pipeline.Struct()
	return TextProposal{s}, err
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xf6e7930cbb80b4ba

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xf6e7930cbb80b4ba, s.Struct)
	return str
}

func (s Tx) MsgDeposit() (MsgDeposit, error) {
	p, err := s.Struct.Ptr(0)
	return MsgDeposit{Struct: p.Struct()}, err
}

func (s Tx) HasMsgDeposit() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgDeposit(v MsgDeposit) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsgDeposit sets the msgDeposit field to a newly
// allocated MsgDeposit struct, preferring placement in s's segment.
func (s Tx) NewMsgDeposit() (MsgDeposit, error) {
	ss, err := NewMsgDeposit(s.Struct.Segment())
	if err != nil {
		return MsgDeposit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Tx) MsgSubmitProposal() (MsgSubmitProposal, error) {
	p, err := s.Struct.Ptr(1)
	return MsgSubmitProposal{Struct: p.Struct()}, err
}

func (s Tx) HasMsgSubmitProposal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgSubmitProposal(v MsgSubmitProposal) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMsgSubmitProposal sets the msgSubmitProposal field to a newly
// allocated MsgSubmitProposal struct, preferring placement in s's segment.
func (s Tx) NewMsgSubmitProposal() (MsgSubmitProposal, error) {
	ss, err := NewMsgSubmitProposal(s.Struct.Segment())
	if err != nil {
		return MsgSubmitProposal{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Tx) MsgVote() (MsgVote, error) {
	p, err := s.Struct.Ptr(2)
	return MsgVote{Struct: p.Struct()}, err
}

func (s Tx) HasMsgVote() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgVote(v MsgVote) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMsgVote sets the msgVote field to a newly
// allocated MsgVote struct, preferring placement in s's segment.
func (s Tx) NewMsgVote() (MsgVote, error) {
	ss, err := NewMsgVote(s.Struct.Segment())
	if err != nil {
		return MsgVote{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xf6e7930cbb80b4ba, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

func (p Tx_Promise) MsgDeposit() MsgDeposit_Promise {
	return MsgDeposit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Tx_Promise) MsgSubmitProposal() MsgSubmitProposal_Promise {
	return MsgSubmitProposal_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Tx_Promise) MsgVote() MsgVote_Promise {
	return MsgVote_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

const schema_f6e87acf2c3fc2e7 = "x\xda\x8cTAh#U\x18\xfe\xbe\xf7\x12\xb3+Y" +
	"\x93\xd9Y1\x1b\x90\x82\xe8\xa1\xba\xb5\xdb\xc6\x82\x14\xa1" +
	"\xbb\xb5\x82+\x1b\xcc\xabq\xd5Ea\xa7\xc9P\x07\x92" +
	"yC\xe6\xed\xda\xf6\xb0Q\x90\xc5\x8b\x17=,\xacG" +
	"/\xde\x0a\xe2a\xad\xe0\xc1\x83\xe8\xc9\"\x9e\xbc\xf5 " +
	"\xd5C\x0f-X\xbc\xc8\xc8\xcb\xc4$\x84\x06z}\xf3" +
	"\xff\xdf\xff}\xdf\xff\xfds\xb9\xcd+b.\xfb\x84\x00" +
	"T)\xfbHr\xd1\xfb\xf4\xea\xf7?}y\x0fN\x89" +
	"\xc9\xfe\x0fK\x97~\xd9\xfa\xf3\x18Y\x91\x03\xe6\x0e\x9f" +
	"\xa5K\xe6\x00\xe7\xdf\x0f\xc0\xe4\xc1\xf6\xc7\xff\x1c\xed=" +
	"\xfc\x04\xaa\xc4\xf1\xda\xca{,\xd3m\xdbb7\xe06" +
	"\x98\xdc\xff\xe8~\xe1\xe1\x99\xd5\xdd1`\x99+\xb2r" +
	"Q\xac\xd2\x9d\xb1}\xee\xb4\xd8\x06\xdcCQH~\xfe" +
	"u\xe7\xa5\xdf\x16v\x8f\xe0\x94\xc4\xb0\x01\xac\xfc!\xca" +
	"t\xff\xeeU\x1f\x8a.\x98\xec|\xf3\xe1w\xf9\xcf\xf7" +
	"\x8fO\x80v\xa7\xe5\xef\xee\x82\xb4\xb5s\xd2\"\x1f\xc8" +
	"B\xb2\xf5\xc5\x8f\x0f\x9e\xbb{7\xb1\xc4G\xa0\xb3\x96" +
	"meO\x0a\xba\x07\xbd\x8e\xbf\xa4%\xbe1\xbb\xae\xef" +
	"\xcc\x9aM\x19\xf9\xf1lC7\xfd\xc6\xf3\x0d/\x0a\xa3" +
	"\xc5\xba\xbfaj\x1d\x1d\x15t\xec\xb5j\xa4:#3" +
	"@\x86\x803=\x0f\xa8\xa7%\xd5eA\x87\xbc@\xfb" +
	"8\xb3\x06\xa8K\x92\xeaE\xc1)\x13\x98\x96\xcf<\x04" +
	"\xf3`\xd2\xf4\xe3F'\x88\x0cr\x81\x0e\x07\xaf\x13'" +
	"W\xe3\xf5\x15?\xd2\xb1\x0c\x8c\x9d\x9b\x1f\xcc}\xe5&" +
	"\xa0V$UM\xf0\xff\xb1\xd5U@]\x97To\x0b" +
	":\x82\x17(\x00\xe7\xcdE@\xd5$UK0\x89:" +
	":\xb2\x1a \xaf5y\x16\x82g{\x94\"\x1d\x07F" +
	"\x83\x1d\x9e\x83\xe09p\xc9k\xeb\xdb\xa1\xe1c`M" +
	"\x92\xc5\xe4\xa0|\xef\x85\xaf\xbe}\xf4k\x80\xf6q@" +
	"8s\x02\xe17n\xaf\xb5\x83\x9e_:\xf6\xd8\x1a\xe3" +
	"\xbd\x0c\xa8+\x92\xea\xfa\x88_\xd7\xb6\x00\xf5\xaa\xa4j" +
	"Z\xe2\"%\xee\xbd\x06\xa8[)\xf1nC\x87\xc6\x0f" +
	"\x0d\xcfs$_\x00\xcf\x83I\x10\x06&\xf0Z+X" +
	"J\x85Lf\x9d\xca\xf7;\xb6\xb3\xaf\xf4j\x86\x0e\x97" +
	"\xbb/\xa7\xf8\x93\x17qC\x1b\xff\xf5\xc8\x04R\x87V" +
	"PJqa\xde\";3O\x01\x14\xce3\xcb\x00\xa5" +
	"\xf3d\x19`\xc6y\xfc&0\xe5\xb7#\xb3\x99\xdb\xf4" +
	"\xe3\xae\xb7\x16\x1b/\x08e\xa8\x93P\xbf\x15\x98\xf7o" +
	"\xf8\x90F\x0f\x06\x8a\xf1\x81\xb2\xbe1y\xe3\x03\xe7\xaa" +
	"\x9f\xf5\xb7\xfb\xee\x88s\xefX\x8f\xeb\x92\xea\x96`\xd2" +
	"\xee'\x0820,\x0eO\x19d\x11\xbd\xcf\xbd}q" +
	"\xb80\x16G,\xeeUu\xdb\xf1\xba5\x80\xc5\xe1E" +
	"\xa5_Nk_5\x05\xc0)B<\xdf\xcfB\xdd*" +
	"\xca\xa4\x8a\xd4\xe20\xd9'\x86x\xea\x8e6\xfe0\xbe" +
	":2\xf6\xbcF~- \x0b\xe0\x7f\x01\x00\x00\xff\xff" +
	"[\xecQ\x11"

func init() {
	schemas.Register(schema_f6e87acf2c3fc2e7,
		0x86a3c8be418d6119,
		0x88b8e1f2f884af9a,
		0xd05208b80f978197,
		0xf2d035d43cbad2c9,
		0xf6e7930cbb80b4ba,
		0xff7e7e2b9ac69b7a)
}
