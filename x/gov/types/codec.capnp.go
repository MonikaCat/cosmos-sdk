// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Coin struct{ capnp.Struct }

// Coin_TypeID is the unique identifier for the type Coin.
const Coin_TypeID = 0xd115aae11eb5cda4

func NewCoin(s *capnp.Segment) (Coin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Coin{st}, err
}

func NewRootCoin(s *capnp.Segment) (Coin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Coin{st}, err
}

func ReadRootCoin(msg *capnp.Message) (Coin, error) {
	root, err := msg.RootPtr()
	return Coin{root.Struct()}, err
}

func (s Coin) String() string {
	str, _ := text.Marshal(0xd115aae11eb5cda4, s.Struct)
	return str
}

func (s Coin) Denom() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Coin) HasDenom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Coin) DenomBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Coin) SetDenom(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Coin) Amount() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Coin) HasAmount() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Coin) SetAmount(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Coin_List is a list of Coin.
type Coin_List struct{ capnp.List }

// NewCoin creates a new list of Coin.
func NewCoin_List(s *capnp.Segment, sz int32) (Coin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Coin_List{l}, err
}

func (s Coin_List) At(i int) Coin { return Coin{s.List.Struct(i)} }

func (s Coin_List) Set(i int, v Coin) error { return s.List.SetStruct(i, v.Struct) }

func (s Coin_List) String() string {
	str, _ := text.MarshalList(0xd115aae11eb5cda4, s.List)
	return str
}

// Coin_Promise is a wrapper for a Coin promised by a client call.
type Coin_Promise struct{ *capnp.Pipeline }

func (p Coin_Promise) Struct() (Coin, error) {
	s, err := p.Pipeline.Struct()
	return Coin{s}, err
}

type MsgSubmitProposal struct{ capnp.Struct }

// MsgSubmitProposal_TypeID is the unique identifier for the type MsgSubmitProposal.
const MsgSubmitProposal_TypeID = 0xd05208b80f978197

func NewMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func NewRootMsgSubmitProposal(s *capnp.Segment) (MsgSubmitProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MsgSubmitProposal{st}, err
}

func ReadRootMsgSubmitProposal(msg *capnp.Message) (MsgSubmitProposal, error) {
	root, err := msg.RootPtr()
	return MsgSubmitProposal{root.Struct()}, err
}

func (s MsgSubmitProposal) String() string {
	str, _ := text.Marshal(0xd05208b80f978197, s.Struct)
	return str
}

func (s MsgSubmitProposal) Content() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s MsgSubmitProposal) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) ContentPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s MsgSubmitProposal) SetContent(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s MsgSubmitProposal) SetContentPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s MsgSubmitProposal) InitialDeposit() (Coin_List, error) {
	p, err := s.Struct.Ptr(1)
	return Coin_List{List: p.List()}, err
}

func (s MsgSubmitProposal) HasInitialDeposit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetInitialDeposit(v Coin_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInitialDeposit sets the initialDeposit field to a newly
// allocated Coin_List, preferring placement in s's segment.
func (s MsgSubmitProposal) NewInitialDeposit(n int32) (Coin_List, error) {
	l, err := NewCoin_List(s.Struct.Segment(), n)
	if err != nil {
		return Coin_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s MsgSubmitProposal) Proposer() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s MsgSubmitProposal) HasProposer() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MsgSubmitProposal) SetProposer(v []byte) error {
	return s.Struct.SetData(2, v)
}

// MsgSubmitProposal_List is a list of MsgSubmitProposal.
type MsgSubmitProposal_List struct{ capnp.List }

// NewMsgSubmitProposal creates a new list of MsgSubmitProposal.
func NewMsgSubmitProposal_List(s *capnp.Segment, sz int32) (MsgSubmitProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return MsgSubmitProposal_List{l}, err
}

func (s MsgSubmitProposal_List) At(i int) MsgSubmitProposal {
	return MsgSubmitProposal{s.List.Struct(i)}
}

func (s MsgSubmitProposal_List) Set(i int, v MsgSubmitProposal) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MsgSubmitProposal_List) String() string {
	str, _ := text.MarshalList(0xd05208b80f978197, s.List)
	return str
}

// MsgSubmitProposal_Promise is a wrapper for a MsgSubmitProposal promised by a client call.
type MsgSubmitProposal_Promise struct{ *capnp.Pipeline }

func (p MsgSubmitProposal_Promise) Struct() (MsgSubmitProposal, error) {
	s, err := p.Pipeline.Struct()
	return MsgSubmitProposal{s}, err
}

func (p MsgSubmitProposal_Promise) Content() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type MsgDeposit struct{ capnp.Struct }

// MsgDeposit_TypeID is the unique identifier for the type MsgDeposit.
const MsgDeposit_TypeID = 0x88b8e1f2f884af9a

func NewMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func NewRootMsgDeposit(s *capnp.Segment) (MsgDeposit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MsgDeposit{st}, err
}

func ReadRootMsgDeposit(msg *capnp.Message) (MsgDeposit, error) {
	root, err := msg.RootPtr()
	return MsgDeposit{root.Struct()}, err
}

func (s MsgDeposit) String() string {
	str, _ := text.Marshal(0x88b8e1f2f884af9a, s.Struct)
	return str
}

func (s MsgDeposit) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgDeposit) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgDeposit) Depositor() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgDeposit) HasDepositor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetDepositor(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgDeposit) Amount() (Coin_List, error) {
	p, err := s.Struct.Ptr(1)
	return Coin_List{List: p.List()}, err
}

func (s MsgDeposit) HasAmount() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MsgDeposit) SetAmount(v Coin_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAmount sets the amount field to a newly
// allocated Coin_List, preferring placement in s's segment.
func (s MsgDeposit) NewAmount(n int32) (Coin_List, error) {
	l, err := NewCoin_List(s.Struct.Segment(), n)
	if err != nil {
		return Coin_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// MsgDeposit_List is a list of MsgDeposit.
type MsgDeposit_List struct{ capnp.List }

// NewMsgDeposit creates a new list of MsgDeposit.
func NewMsgDeposit_List(s *capnp.Segment, sz int32) (MsgDeposit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return MsgDeposit_List{l}, err
}

func (s MsgDeposit_List) At(i int) MsgDeposit { return MsgDeposit{s.List.Struct(i)} }

func (s MsgDeposit_List) Set(i int, v MsgDeposit) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgDeposit_List) String() string {
	str, _ := text.MarshalList(0x88b8e1f2f884af9a, s.List)
	return str
}

// MsgDeposit_Promise is a wrapper for a MsgDeposit promised by a client call.
type MsgDeposit_Promise struct{ *capnp.Pipeline }

func (p MsgDeposit_Promise) Struct() (MsgDeposit, error) {
	s, err := p.Pipeline.Struct()
	return MsgDeposit{s}, err
}

type VoteOption uint16

// VoteOption_TypeID is the unique identifier for the type VoteOption.
const VoteOption_TypeID = 0xf2d035d43cbad2c9

// Values of VoteOption.
const (
	VoteOption_empty      VoteOption = 0
	VoteOption_yes        VoteOption = 1
	VoteOption_abstain    VoteOption = 2
	VoteOption_no         VoteOption = 3
	VoteOption_noWithVeto VoteOption = 4
)

// String returns the enum's constant name.
func (c VoteOption) String() string {
	switch c {
	case VoteOption_empty:
		return "empty"
	case VoteOption_yes:
		return "yes"
	case VoteOption_abstain:
		return "abstain"
	case VoteOption_no:
		return "no"
	case VoteOption_noWithVeto:
		return "noWithVeto"

	default:
		return ""
	}
}

// VoteOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func VoteOptionFromString(c string) VoteOption {
	switch c {
	case "empty":
		return VoteOption_empty
	case "yes":
		return VoteOption_yes
	case "abstain":
		return VoteOption_abstain
	case "no":
		return VoteOption_no
	case "noWithVeto":
		return VoteOption_noWithVeto

	default:
		return 0
	}
}

type VoteOption_List struct{ capnp.List }

func NewVoteOption_List(s *capnp.Segment, sz int32) (VoteOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return VoteOption_List{l.List}, err
}

func (l VoteOption_List) At(i int) VoteOption {
	ul := capnp.UInt16List{List: l.List}
	return VoteOption(ul.At(i))
}

func (l VoteOption_List) Set(i int, v VoteOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type MsgVote struct{ capnp.Struct }

// MsgVote_TypeID is the unique identifier for the type MsgVote.
const MsgVote_TypeID = 0xff7e7e2b9ac69b7a

func NewMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func NewRootMsgVote(s *capnp.Segment) (MsgVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MsgVote{st}, err
}

func ReadRootMsgVote(msg *capnp.Message) (MsgVote, error) {
	root, err := msg.RootPtr()
	return MsgVote{root.Struct()}, err
}

func (s MsgVote) String() string {
	str, _ := text.Marshal(0xff7e7e2b9ac69b7a, s.Struct)
	return str
}

func (s MsgVote) ProposalId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MsgVote) SetProposalId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MsgVote) Voter() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MsgVote) HasVoter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MsgVote) SetVoter(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MsgVote) Option() VoteOption {
	return VoteOption(s.Struct.Uint16(8))
}

func (s MsgVote) SetOption(v VoteOption) {
	s.Struct.SetUint16(8, uint16(v))
}

// MsgVote_List is a list of MsgVote.
type MsgVote_List struct{ capnp.List }

// NewMsgVote creates a new list of MsgVote.
func NewMsgVote_List(s *capnp.Segment, sz int32) (MsgVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return MsgVote_List{l}, err
}

func (s MsgVote_List) At(i int) MsgVote { return MsgVote{s.List.Struct(i)} }

func (s MsgVote_List) Set(i int, v MsgVote) error { return s.List.SetStruct(i, v.Struct) }

func (s MsgVote_List) String() string {
	str, _ := text.MarshalList(0xff7e7e2b9ac69b7a, s.List)
	return str
}

// MsgVote_Promise is a wrapper for a MsgVote promised by a client call.
type MsgVote_Promise struct{ *capnp.Pipeline }

func (p MsgVote_Promise) Struct() (MsgVote, error) {
	s, err := p.Pipeline.Struct()
	return MsgVote{s}, err
}

type TextProposal struct{ capnp.Struct }

// TextProposal_TypeID is the unique identifier for the type TextProposal.
const TextProposal_TypeID = 0x86a3c8be418d6119

func NewTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func NewRootTextProposal(s *capnp.Segment) (TextProposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TextProposal{st}, err
}

func ReadRootTextProposal(msg *capnp.Message) (TextProposal, error) {
	root, err := msg.RootPtr()
	return TextProposal{root.Struct()}, err
}

func (s TextProposal) String() string {
	str, _ := text.Marshal(0x86a3c8be418d6119, s.Struct)
	return str
}

func (s TextProposal) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TextProposal) HasTitle() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TextProposal) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TextProposal) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TextProposal) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TextProposal) HasDescription() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TextProposal) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TextProposal) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// TextProposal_List is a list of TextProposal.
type TextProposal_List struct{ capnp.List }

// NewTextProposal creates a new list of TextProposal.
func NewTextProposal_List(s *capnp.Segment, sz int32) (TextProposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TextProposal_List{l}, err
}

func (s TextProposal_List) At(i int) TextProposal { return TextProposal{s.List.Struct(i)} }

func (s TextProposal_List) Set(i int, v TextProposal) error { return s.List.SetStruct(i, v.Struct) }

func (s TextProposal_List) String() string {
	str, _ := text.MarshalList(0x86a3c8be418d6119, s.List)
	return str
}

// TextProposal_Promise is a wrapper for a TextProposal promised by a client call.
type TextProposal_Promise struct{ *capnp.Pipeline }

func (p TextProposal_Promise) Struct() (TextProposal, error) {
	s, err := p.Pipeline.Struct()
	return TextProposal{s}, err
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xf6e7930cbb80b4ba

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xf6e7930cbb80b4ba, s.Struct)
	return str
}

func (s Tx) MsgDeposit() (MsgDeposit, error) {
	p, err := s.Struct.Ptr(0)
	return MsgDeposit{Struct: p.Struct()}, err
}

func (s Tx) HasMsgDeposit() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgDeposit(v MsgDeposit) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsgDeposit sets the msgDeposit field to a newly
// allocated MsgDeposit struct, preferring placement in s's segment.
func (s Tx) NewMsgDeposit() (MsgDeposit, error) {
	ss, err := NewMsgDeposit(s.Struct.Segment())
	if err != nil {
		return MsgDeposit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Tx) MsgSubmitProposal() (MsgSubmitProposal, error) {
	p, err := s.Struct.Ptr(1)
	return MsgSubmitProposal{Struct: p.Struct()}, err
}

func (s Tx) HasMsgSubmitProposal() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgSubmitProposal(v MsgSubmitProposal) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMsgSubmitProposal sets the msgSubmitProposal field to a newly
// allocated MsgSubmitProposal struct, preferring placement in s's segment.
func (s Tx) NewMsgSubmitProposal() (MsgSubmitProposal, error) {
	ss, err := NewMsgSubmitProposal(s.Struct.Segment())
	if err != nil {
		return MsgSubmitProposal{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Tx) MsgVote() (MsgVote, error) {
	p, err := s.Struct.Ptr(2)
	return MsgVote{Struct: p.Struct()}, err
}

func (s Tx) HasMsgVote() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetMsgVote(v MsgVote) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMsgVote sets the msgVote field to a newly
// allocated MsgVote struct, preferring placement in s's segment.
func (s Tx) NewMsgVote() (MsgVote, error) {
	ss, err := NewMsgVote(s.Struct.Segment())
	if err != nil {
		return MsgVote{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xf6e7930cbb80b4ba, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

func (p Tx_Promise) MsgDeposit() MsgDeposit_Promise {
	return MsgDeposit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Tx_Promise) MsgSubmitProposal() MsgSubmitProposal_Promise {
	return MsgSubmitProposal_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Tx_Promise) MsgVote() MsgVote_Promise {
	return MsgVote_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

const schema_f6e87acf2c3fc2e7 = "x\xda\x8c\x94Ah\x1cU\x18\xc7\xff\xff\xf7&n\x0b" +
	"\xa9\xbb\xd3i!\x0d\xc6\x80(XmLM,H\x10" +
	"\xd2\xa6)Xip_\xdcV[<t\xb2;\xc4\x81" +
	"\xddy\xe3\xceK\xcd\x06\xda\xb5\xa0\xa2\x07/\x8a\x14\xab" +
	"7=y\xc9E\xa1V\x10\x14\x14=\x88U<y\xeb" +
	"\xa9\xe2\xb1\x87\xe2m\xe4\xcdlv\x96t\x17z\x1b\xde" +
	"|\xef\xfb\xfe\xbf\xef\xff}\xef\xe8\xe7<.\x9e\x1d\xd3" +
	"\x02P\x8f\x8c=\x94\x1e\xf2?<\xf1\xfd/_\xbc\x07" +
	"w\x82\xe9\x9d\x1f\x17\x8f\xfc\xbe\xf5\xcf=\x8c\x89\x120" +
	"?\xc5\xa7\xe8\xcd\xb0\x04x\x87\xf9\x16\x98^\xdf~\xe7" +
	"\xbf\xbb\xb7o\xbc\x0f5\xc1\xfb\xa2?\xe0$\xbdO\xb3" +
	"\xe8O\xb8\x0d\xa6\xd7\xae^+\xdf\xd8\xb3zkWj" +
	"Y\xaap\xfe\x94X\xa5w\xde\xde\xf3\xce\x8am\xc0\x9b" +
	"\x92\xe5\xf4\xcb\xdf\xbey\xf4\xf6W\x07\xff\x18\xa2\xc5s" +
	"\xe5\xbf\xde\x94\xb4_\x87\xa4\x95\xf2\xeb\x9f7_\xf8\xeb" +
	"\xd8\xad\xbbp'D\x11\x0b\xceo\xc8Iz\xeff\x91" +
	"We\x17Lo~\xfd\xf6w\xe3\x1f\xdf\xb97D\x86" +
	"\xf7\xad\xfc\xdb\xfb)\x8b\xfdAZ\x15\x97\x9dr\xba\xf5" +
	"\xd9\xcf\xd7\x9f\xber%\xb5\x90\x03\xa9\xc7,\xd9\xfc\x9b" +
	"\x8e\xa0w\xd9\xb17:\x8e\x85\xdc\x9c]\xd7\x97fM" +
	"G\xc6A2[\xd7\x8d\xa0\xfeL\xdd\x8f\xa3x\xa1\x16" +
	"l\x9aj[\xc7e\x9d\xf8\xcd*\xa9\xf6H\x07p\x08" +
	"\xb8\x87\xe7\x00\xf5\xb8\xa4:*\xe8\x92\x07h\x0fg\xd6" +
	"\x00uDR=/8mB\xd3\x0c8\x0e\xc1q0" +
	"m\x04I\xbd\x1d\xc6\x06\xa5PG\xfd\xd3\x91\x95W\x92" +
	"\xf5\xe5 \xd6\x89\x0c\x8d\xad;\xde\xaf{\xea\x02\xa0\x96" +
	"%UUp\xa7\xec\xca*\xa0\xceH\xaa\xd7\x04]\xc1" +
	"\x03\x14\x80{v\x01PUI\xd5\x14L\xe3\xb6\x8e-" +
	"\x03\xe4\xe9\x06\xf7Bpo&)\xd6Ih4\xd8\xe6" +
	">\x08\xee\x03\x17\xfd\x96\xde\x88\x0c\x1f\x06\xab\x92\xac\x14" +
	"v\x82\xf6\xb0/\xd8\x19\"\xf8\x95\x8d\xb5V\x98\xf5K" +
	"'>\x9b\xbbt/\x01\xea\xb8\xa4:3\xd0\xaf\xd3[" +
	"\x80zQR5\xacp\x91\x0b\xf7_\x02\xd4\xc5\\x" +
	"\xb7\xae#\x13D\x86\xfb90\x8b\x00\xf7\x83i\x18\x85" +
	"&\xf4\x9b\xcbX\xccAF\xab\xce\xf1\x83\xb6\xbd\xd9#" +
	"=\xe1\xd0\xe5R\xf7d\x9e\xbf\xcf%vs\x95O\xea" +
	"0z\x10\xebm\xbb\x9f\x94T\xcf\x09N7\x82H\xb7" +
	"vL\xde\xe9i\xaf\xf0h\xcf\xcfi\x13\xbc\x1c\x9bP" +
	"\xea\xac`\xde\x8dcs\x16\xc2\x9dy\x0c\xa0p\x9fX" +
	"\x02(\xdd\xa9I\x80\x8e{\xf0\x020\x1d\xb4b\xd3)" +
	"u\x82\xa4\xeb\xaf%\xc6\x0f#\x19\xe94\xd2\xaf\x86\xe6" +
	"\x8ds\x01\xa4\xd1\xa3\xd9dms\xf4p\xf5\xc9V>" +
	"\xea\x0d\xd2\xeb\x03&\x9d\xb7v\xd6$\xd5E\xc1\xb4\xd5" +
	"\x1bV\xc8\xd0\xb0R\xbc0 +\xc8~g\xa3\xc1b" +
	"6X\x19p3\x8b\xea\xb6\x92u\xdb\x00V\x8a\xe5\xcd" +
	"\xff\x8cpj\xd8\xca\xd8\x04x\x80}\x99\xeb\x8d]\xcd" +
	"\x1299\x91Z(\x96h\xe8\xbeL_\xd2&(6" +
	"E\xc7\xc6nr\xb9x\xc5@\x96\xc1\xff\x03\x00\x00\xff" +
	"\xff\xddzsf"

func init() {
	schemas.Register(schema_f6e87acf2c3fc2e7,
		0x86a3c8be418d6119,
		0x88b8e1f2f884af9a,
		0xd05208b80f978197,
		0xd115aae11eb5cda4,
		0xf2d035d43cbad2c9,
		0xf6e7930cbb80b4ba,
		0xff7e7e2b9ac69b7a)
}
