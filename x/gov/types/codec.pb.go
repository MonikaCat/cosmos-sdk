// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/gov/types/codec.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoteOption defines a vote option
type VoteOption int32

const (
	OptionEmpty      VoteOption = 0
	OptionYes        VoteOption = 1
	OptionAbstain    VoteOption = 2
	OptionNo         VoteOption = 3
	OptionNoWithVeto VoteOption = 4
)

var VoteOption_name = map[int32]string{
	0: "EMPTY",
	1: "YES",
	2: "ABSTAIN",
	3: "NO",
	4: "NO_WITH_VETO",
}

var VoteOption_value = map[string]int32{
	"EMPTY":        0,
	"YES":          1,
	"ABSTAIN":      2,
	"NO":           3,
	"NO_WITH_VETO": 4,
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4ed4b2a5a30fa918, []int{0}
}

// ProposalStatus is a type alias that represents a proposal status as a byte
type ProposalStatus int32

const (
	StatusNil           ProposalStatus = 0
	StatusDepositPeriod ProposalStatus = 1
	StatusVotingPeriod  ProposalStatus = 2
	StatusPassed        ProposalStatus = 3
	StatusRejected      ProposalStatus = 4
	StatusFailed        ProposalStatus = 5
)

var ProposalStatus_name = map[int32]string{
	0: "NIL",
	1: "DEPOSIT_PERIOD",
	2: "VOTING_PERIOD",
	3: "PASSED",
	4: "REJECTED",
	5: "FAILED",
}

var ProposalStatus_value = map[string]int32{
	"NIL":            0,
	"DEPOSIT_PERIOD": 1,
	"VOTING_PERIOD":  2,
	"PASSED":         3,
	"REJECTED":       4,
	"FAILED":         5,
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4ed4b2a5a30fa918, []int{1}
}

// TallyResult defines a standard tally for a proposal
type TallyResult struct {
	Yes        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=yes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"yes" yaml:"yes"`
	Abstain    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=abstain,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"abstain" yaml:"abstain"`
	No         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=no,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no" yaml:"no"`
	NoWithVeto github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=no_with_veto,json=noWithVeto,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no_with_veto" yaml:"no_with_veto"`
}

func (m *TallyResult) Reset()      { *m = TallyResult{} }
func (*TallyResult) ProtoMessage() {}
func (*TallyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ed4b2a5a30fa918, []int{0}
}
func (m *TallyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyResult.Merge(m, src)
}
func (m *TallyResult) XXX_Size() int {
	return m.Size()
}
func (m *TallyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyResult.DiscardUnknown(m)
}

var xxx_messageInfo_TallyResult proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos_sdk.x.gov.v1.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterEnum("cosmos_sdk.x.gov.v1.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterType((*TallyResult)(nil), "cosmos_sdk.x.gov.v1.TallyResult")
}

func init() { proto.RegisterFile("x/gov/types/codec.proto", fileDescriptor_4ed4b2a5a30fa918) }

var fileDescriptor_4ed4b2a5a30fa918 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbf, 0x6e, 0xd3, 0x50,
	0x14, 0xc6, 0xed, 0xa4, 0x7f, 0x6f, 0xd3, 0xe0, 0xde, 0x56, 0x6d, 0x64, 0x21, 0xc7, 0xca, 0x50,
	0x95, 0xa2, 0x26, 0x42, 0xb0, 0xf0, 0x67, 0x20, 0x25, 0x2e, 0x18, 0x8a, 0x13, 0x39, 0x56, 0xaa,
	0x76, 0x89, 0x9c, 0xf8, 0xe2, 0x9a, 0x3a, 0x3e, 0x56, 0xee, 0x4d, 0xda, 0x6c, 0x8c, 0xc8, 0x13,
	0x2f, 0xe0, 0x89, 0x0e, 0x0c, 0x0c, 0x3c, 0x46, 0xc7, 0x8e, 0x15, 0x43, 0x45, 0xd3, 0x15, 0x09,
	0x89, 0x27, 0x40, 0xf5, 0x4d, 0xd4, 0x22, 0x24, 0xa4, 0x2e, 0x96, 0xcf, 0xfd, 0xbe, 0xef, 0x77,
	0xce, 0xb1, 0x6c, 0xa3, 0x95, 0xa3, 0x92, 0x0b, 0xfd, 0x12, 0x1b, 0x84, 0x84, 0x96, 0xda, 0xe0,
	0x90, 0x76, 0x31, 0xec, 0x02, 0x03, 0xbc, 0xd8, 0x06, 0xda, 0x01, 0xda, 0xa4, 0xce, 0x41, 0xf1,
	0xa8, 0xe8, 0x42, 0xbf, 0xd8, 0x7f, 0x20, 0x2f, 0x70, 0x5f, 0x72, 0xe5, 0x3e, 0xf9, 0x51, 0x9f,
	0x04, 0x0e, 0x74, 0x4b, 0xae, 0xc7, 0xf6, 0x7b, 0xad, 0x62, 0x1b, 0x3a, 0x25, 0x17, 0x5c, 0x28,
	0x25, 0x6a, 0xab, 0xf7, 0x2e, 0xa9, 0x92, 0x22, 0xb9, 0x1b, 0xa5, 0x1e, 0xff, 0x9b, 0xea, 0x12,
	0x97, 0x04, 0x1b, 0x01, 0x61, 0x87, 0xd0, 0x3d, 0x28, 0xf1, 0xee, 0x1b, 0x3c, 0xc8, 0x8b, 0x51,
	0x34, 0xef, 0x02, 0xb8, 0x3e, 0xb9, 0x6e, 0xc0, 0xbc, 0x0e, 0xa1, 0xcc, 0xee, 0x84, 0xdc, 0x50,
	0xf8, 0x95, 0x42, 0x73, 0x96, 0xed, 0xfb, 0x03, 0x93, 0xd0, 0x9e, 0xcf, 0xb0, 0x81, 0xd2, 0x03,
	0x42, 0x73, 0xa2, 0x2a, 0xae, 0x65, 0x36, 0x9f, 0x9d, 0x9c, 0xe7, 0x85, 0xef, 0xe7, 0xf9, 0xd5,
	0x1b, 0x9d, 0x39, 0x7e, 0xdc, 0x92, 0x3a, 0x07, 0xa3, 0x05, 0xf5, 0x80, 0xfd, 0x3e, 0xcf, 0xa3,
	0x81, 0xdd, 0xf1, 0x9f, 0x14, 0x06, 0x84, 0x16, 0xcc, 0x2b, 0x10, 0xde, 0x43, 0xd3, 0x76, 0x8b,
	0x32, 0xdb, 0x0b, 0x72, 0xa9, 0x84, 0xf9, 0xfc, 0xd6, 0xcc, 0x2c, 0x67, 0x8e, 0x30, 0x05, 0x73,
	0x0c, 0xc4, 0x6f, 0x50, 0x2a, 0x80, 0x5c, 0x3a, 0xc1, 0x3e, 0xbd, 0x35, 0x76, 0x96, 0x63, 0x03,
	0x28, 0x98, 0xa9, 0x00, 0xb0, 0x8b, 0x32, 0x01, 0x34, 0x0f, 0x3d, 0xb6, 0xdf, 0xec, 0x13, 0x06,
	0xb9, 0x89, 0x04, 0xab, 0xdd, 0x1a, 0xbb, 0x38, 0xc6, 0x5e, 0xb3, 0x0a, 0x26, 0x0a, 0x60, 0xc7,
	0x63, 0xfb, 0x0d, 0xc2, 0x60, 0xfd, 0xab, 0x88, 0x50, 0x03, 0x18, 0xa9, 0x86, 0xcc, 0x83, 0x00,
	0xcb, 0x68, 0x52, 0x7b, 0x5b, 0xb3, 0x76, 0x25, 0x41, 0xbe, 0x13, 0xc5, 0xea, 0x1c, 0x3f, 0xd6,
	0x3a, 0x21, 0x1b, 0xe0, 0x65, 0x94, 0xde, 0xd5, 0xea, 0x92, 0x28, 0xcf, 0x47, 0xb1, 0x3a, 0xcb,
	0x95, 0x5d, 0x42, 0xb1, 0x82, 0xa6, 0xcb, 0x9b, 0x75, 0xab, 0xac, 0x1b, 0x52, 0x4a, 0x5e, 0x88,
	0x62, 0x75, 0x9e, 0x6b, 0xe5, 0xd1, 0x83, 0x59, 0x42, 0x29, 0xa3, 0x2a, 0xa5, 0xe5, 0x4c, 0x14,
	0xab, 0x33, 0x5c, 0x32, 0x00, 0xaf, 0xa2, 0x8c, 0x51, 0x6d, 0xee, 0xe8, 0xd6, 0xab, 0x66, 0x43,
	0xb3, 0xaa, 0xd2, 0x84, 0xbc, 0x14, 0xc5, 0xaa, 0x34, 0xd6, 0xc7, 0x03, 0xca, 0x99, 0x8f, 0x9f,
	0x15, 0xe1, 0xcb, 0xb1, 0x22, 0x7c, 0x3b, 0x56, 0x84, 0xf5, 0x9f, 0x22, 0xca, 0xd6, 0xba, 0x10,
	0x02, 0xb5, 0xfd, 0x3a, 0xb3, 0x59, 0x8f, 0x5e, 0x8d, 0x65, 0xe8, 0xdb, 0x92, 0xc0, 0xc7, 0xe2,
	0x87, 0x86, 0xe7, 0xe3, 0xfb, 0x28, 0x5b, 0xd1, 0x6a, 0xd5, 0xba, 0x6e, 0x35, 0x6b, 0x9a, 0xa9,
	0x57, 0x2b, 0x92, 0x28, 0xaf, 0x44, 0xb1, 0xba, 0xc8, 0x2d, 0x15, 0x12, 0x02, 0xf5, 0x58, 0x8d,
	0x74, 0x3d, 0x70, 0xf0, 0x3d, 0x34, 0xdf, 0xa8, 0x5a, 0xba, 0xf1, 0x72, 0xec, 0x4d, 0xc9, 0xcb,
	0x51, 0xac, 0x62, 0xee, 0x6d, 0x00, 0xf3, 0x02, 0x77, 0x64, 0xbd, 0x8b, 0xa6, 0x6a, 0xe5, 0x7a,
	0x5d, 0xab, 0x48, 0x69, 0x59, 0x8a, 0x62, 0x35, 0xc3, 0x3d, 0x35, 0x9b, 0x52, 0xe2, 0x60, 0x15,
	0xcd, 0x98, 0xda, 0x6b, 0xed, 0x85, 0xa5, 0x55, 0xa4, 0x09, 0x19, 0x47, 0xb1, 0x9a, 0xe5, 0xba,
	0x49, 0xde, 0x93, 0x36, 0x23, 0x49, 0x7e, 0xab, 0xac, 0x6f, 0x6b, 0x15, 0x69, 0xf2, 0x66, 0x7e,
	0xcb, 0xf6, 0x7c, 0xe2, 0xfc, 0xbd, 0xee, 0xa6, 0x71, 0x72, 0xa1, 0x08, 0x67, 0x17, 0x8a, 0xf0,
	0x61, 0xa8, 0x08, 0x27, 0x43, 0x45, 0x3c, 0x1d, 0x2a, 0xe2, 0x8f, 0xa1, 0x22, 0x7e, 0xba, 0x54,
	0x84, 0xd3, 0x4b, 0x45, 0x38, 0xbb, 0x54, 0x84, 0xbd, 0xb5, 0xff, 0xbe, 0x0e, 0x37, 0xfe, 0x12,
	0xad, 0xa9, 0xe4, 0x33, 0x7b, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xd6, 0x34, 0x28, 0x3b,
	0x04, 0x00, 0x00,
}

func (m *TallyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NoWithVeto.Size()
		i -= size
		if _, err := m.NoWithVeto.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.No.Size()
		i -= size
		if _, err := m.No.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Abstain.Size()
		i -= size
		if _, err := m.Abstain.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Yes.Size()
		i -= size
		if _, err := m.Yes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	offset -= sovCodec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TallyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Yes.Size()
	n += 1 + l + sovCodec(uint64(l))
	l = m.Abstain.Size()
	n += 1 + l + sovCodec(uint64(l))
	l = m.No.Size()
	n += 1 + l + sovCodec(uint64(l))
	l = m.NoWithVeto.Size()
	n += 1 + l + sovCodec(uint64(l))
	return n
}

func sovCodec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TallyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Yes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abstain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Abstain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWithVeto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NoWithVeto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCodec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCodec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCodec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCodec = fmt.Errorf("proto: unexpected end of group")
)
